<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飞码录</title>
  
  <subtitle>飞码录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.codesboy.cn/"/>
  <updated>2020-06-11T14:55:51.195Z</updated>
  <id>https://www.codesboy.cn/</id>
  
  <author>
    <name>飞码录</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>142_环形链表II</title>
    <link href="https://www.codesboy.cn/2020/06/11/142_%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/"/>
    <id>https://www.codesboy.cn/2020/06/11/142_%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/</id>
    <published>2020-06-11T13:21:24.000Z</published>
    <updated>2020-06-11T14:55:51.195Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个链表，返回链表开始入环的第一个节点。&nbsp;如果链表无环，则返回&nbsp;<code>null</code>。</p><p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。</p><a id="more"></a><p><strong>说明：</strong>不允许修改给定的链表。</p><p>&nbsp;</p><p><strong>示例 1：</strong></p><pre><strong>输入：</strong>head = [3,2,0,-4], pos = 1<strong>输出：</strong>tail connects to node index 1<strong>解释：</strong>链表中有一个环，其尾部连接到第二个节点。</pre><p><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" style="height: 97px; width: 300px;"></p><p><strong>示例&nbsp;2：</strong></p><pre><strong>输入：</strong>head = [1,2], pos = 0<strong>输出：</strong>tail connects to node index 0<strong>解释：</strong>链表中有一个环，其尾部连接到第一个节点。</pre><p><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" style="height: 74px; width: 141px;"></p><p><strong>示例 3：</strong></p><pre><strong>输入：</strong>head = [1], pos = -1<strong>输出：</strong>no cycle<strong>解释：</strong>链表中没有环。</pre><p><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" style="height: 45px; width: 45px;"></p><p>&nbsp;</p><p><strong>进阶：</strong><br>你是否可以不用额外空间解决此题？</p><div><div>Related Topics</div><div><li>链表</li><li>双指针</li></div></div><br/><p>第一种，暴力解法：<br>时间复杂度 O(n)，空间复杂度O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;ListNode&gt; listNodes = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        ListNode tempHead = head;</span><br><span class="line">        <span class="keyword">while</span> (tempHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (listNodes.contains(tempHead)) &#123;</span><br><span class="line">                <span class="keyword">return</span> tempHead;</span><br><span class="line">            &#125;</span><br><span class="line">            listNodes.add(tempHead);</span><br><span class="line">            tempHead = tempHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/06/20200611215818.png" alt=""></p><p>第二种，快慢指针追及问题<br>时间复杂度 O(n)，空间复杂度O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode slowNode = head;</span><br><span class="line">        ListNode fastNode = head;</span><br><span class="line">        <span class="keyword">while</span> (fastNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fastNode.next != <span class="keyword">null</span> &amp;&amp; fastNode.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastNode = fastNode.next.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            slowNode = slowNode.next;</span><br><span class="line">            <span class="keyword">if</span> (slowNode == fastNode) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode restartNode = head;</span><br><span class="line">        <span class="keyword">while</span> (restartNode != slowNode) &#123;</span><br><span class="line">            restartNode=restartNode.next;</span><br><span class="line">            slowNode = slowNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> restartNode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/06/20200611224016.png" alt=""></p><p><a href="https://www.bilibili.com/video/BV11f4y127Se?pop_share=1">91算法打卡第十一天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个链表，返回链表开始入环的第一个节点。&amp;nbsp;如果链表无环，则返回&amp;nbsp;&lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;为了表示给定链表中的环，我们使用整数 &lt;code&gt;pos&lt;/code&gt; 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 &lt;code&gt;pos&lt;/code&gt; 是 &lt;code&gt;-1&lt;/code&gt;，则在该链表中没有环。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>160_相交链表</title>
    <link href="https://www.codesboy.cn/2020/06/10/160_%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
    <id>https://www.codesboy.cn/2020/06/10/160_%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</id>
    <published>2020-06-10T13:21:24.000Z</published>
    <updated>2020-06-10T15:22:09.859Z</updated>
    
    <content type="html"><![CDATA[<p>编写一个程序，找到两个单链表相交的起始节点。</p><a id="more"></a><p>如下面的两个链表<strong>：</strong></p><p><a href="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png" target="_blank"><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png" style="height: 130px; width: 400px;"></a></p><p>在节点 c1 开始相交。</p><p>&nbsp;</p><p><strong>示例 1：</strong></p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png" target="_blank"><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png" style="height: 130px; width: 400px;"></a></p><pre><strong>输入：</strong>intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3<strong>输出：</strong>Reference of the node with value = 8<strong>输入解释：</strong>相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</pre><p>&nbsp;</p><p><strong>示例&nbsp;2：</strong></p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png" target="_blank"><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_2.png" style="height: 136px; width: 350px;"></a></p><pre><strong>输入：</strong>intersectVal&nbsp;= 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1<strong>输出：</strong>Reference of the node with value = 2<strong>输入解释：</strong>相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</pre><p>&nbsp;</p><p><strong>示例&nbsp;3：</strong></p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png" target="_blank"><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png" style="height: 126px; width: 200px;"></a></p><pre><strong>输入：</strong>intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2<strong>输出：</strong>null<strong>输入解释：</strong>从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。<strong>解释：</strong>这两个链表不相交，因此返回 null。</pre><p>&nbsp;</p><p><strong>注意：</strong></p><ul>    <li>如果两个链表没有交点，返回 <code>null</code>.</li>    <li>在返回结果后，两个链表仍须保持原有的结构。</li>    <li>可假定整个链表结构中没有循环。</li>    <li>程序尽量满足 O(<em>n</em>) 时间复杂度，且仅用 O(<em>1</em>) 内存。</li></ul><div><div>Related Topics</div><div><li>链表</li></div></div><br/><p>暴力解：时间复杂度O(n),空间复杂度O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        Map&lt;ListNode, Integer&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        ListNode tempA = headA;</span><br><span class="line">        ListNode tempB = headB;</span><br><span class="line">        <span class="keyword">while</span> (tempA != <span class="keyword">null</span>) &#123;</span><br><span class="line">            map.put(tempA, <span class="keyword">null</span>);</span><br><span class="line">            tempA = tempA.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (tempB != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(tempB)) &#123;</span><br><span class="line">                <span class="keyword">return</span> tempB;</span><br><span class="line">            &#125;</span><br><span class="line">            tempB = tempB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/06/20200610230507.png" alt=""></p><p>第二种思路来自群友，很巧妙的解法。假设有A由a+b组成，B由c+b组成， b为交集部分<br>那么 a+b+c=c+b+a 。以步长为1 同时遍历，最后两者相等即为交集点。<br>时间复杂度O(n),空间复杂度O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (headA == <span class="keyword">null</span> || headB == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode tempA = headA;</span><br><span class="line">        ListNode tempB = headB;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (tempA != tempB) &#123;</span><br><span class="line">            tempA = tempA == <span class="keyword">null</span> ? headB : tempA.next;</span><br><span class="line">            tempB = tempB == <span class="keyword">null</span> ? headA : tempB.next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tempA;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/06/20200610230507.png" alt=""></p><p><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/shuang-zhi-zhen-ha-xi-by-zstar01/">91算法打卡第十天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编写一个程序，找到两个单链表相交的起始节点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>109_有序链表转换二叉搜索树</title>
    <link href="https://www.codesboy.cn/2020/06/09/109_%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>https://www.codesboy.cn/2020/06/09/109_%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</id>
    <published>2020-06-09T13:21:24.000Z</published>
    <updated>2020-06-09T17:16:07.168Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。</p><p>本题中，一个高度平衡二叉树是指一个二叉树<em>每个节点&nbsp;</em>的左右两个子树的高度差的绝对值不超过 1。</p><a id="more"></a><p><strong>示例:</strong></p><pre>给定的有序链表： [-10, -3, 0, 5, 9],一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：      0     / \   -3   9   /   / -10  5</pre><div><div>Related Topics</div><div><li>深度优先搜索</li><li>链表</li></div></div><br/><p>看答案的，自己想复杂了，对树这种结构掌握不太好。边界条件要注意。</p><p>时间复杂度O(n)，空间复杂度O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.integerList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">changeToList</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.integerList.add(node.val);</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedListToBST</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        changeToList(head);</span><br><span class="line"></span><br><span class="line">        TreeNode treeNode = getBST(<span class="number">0</span>, <span class="keyword">this</span>.integerList.size() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> treeNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">getBST</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mid = (start + end) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> midVal = integerList.get(mid);</span><br><span class="line">        TreeNode treeNode = <span class="keyword">new</span> TreeNode(midVal);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">            <span class="keyword">return</span> treeNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode left = getBST(start, mid-<span class="number">1</span>);</span><br><span class="line">        TreeNode right = getBST(mid+<span class="number">1</span>, end);</span><br><span class="line">        treeNode.left = left;</span><br><span class="line">        treeNode.right = right;</span><br><span class="line">        <span class="keyword">return</span> treeNode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/06/20200610005914.png" alt=""></p><p><a href="https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/solution/you-xu-lian-biao-zhuan-huan-er-cha-sou-suo-shu-by-/">91算法打卡第九天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。&lt;/p&gt;

&lt;p&gt;本题中，一个高度平衡二叉树是指一个二叉树&lt;em&gt;每个节点&amp;nbsp;&lt;/em&gt;的左右两个子树的高度差的绝对值不超过 1。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>430_扁平化多级双向链表</title>
    <link href="https://www.codesboy.cn/2020/06/08/430_%E6%89%81%E5%B9%B3%E5%8C%96%E5%A4%9A%E7%BA%A7%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <id>https://www.codesboy.cn/2020/06/08/430_%E6%89%81%E5%B9%B3%E5%8C%96%E5%A4%9A%E7%BA%A7%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</id>
    <published>2020-06-08T13:21:24.000Z</published>
    <updated>2020-06-09T17:16:49.186Z</updated>
    
    <content type="html"><![CDATA[<p>多级双向链表中，除了指向下一个节点和前一个节点指针之外，它还有一个子链表指针，可能指向单独的双向链表。这些子列表也可能会有一个或多个自己的子项，依此类推，生成多级数据结构，如下面的示例所示。</p><p>给你位于列表第一级的头节点，请你扁平化列表，使所有结点出现在单级双链表中。</p><a id="more"></a><p>&nbsp;</p><p><strong>示例 1：</strong></p><pre><strong>输入：</strong>head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]<strong>输出：</strong>[1,2,3,7,8,11,12,9,10,4,5,6]<strong>解释：</strong>输入的多级列表如下图所示：<img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/multilevellinkedlist.png" style="height: 363px; width: 640px;">扁平化后的链表如下图：<img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/multilevellinkedlistflattened.png" style="height: 80px; width: 1100px;"></pre><p><strong>示例 2：</strong></p><pre><strong>输入：</strong>head = [1,2,null,3]<strong>输出：</strong>[1,3,2]<strong>解释：</strong>输入的多级列表如下图所示：  1---2---NULL  |  3---NULL</pre><p><strong>示例 3：</strong></p><pre><strong>输入：</strong>head = []<strong>输出：</strong>[]</pre><p>&nbsp;</p><p><strong>如何表示测试用例中的多级链表？</strong></p><p>以 <strong>示例 1</strong> 为例：</p><pre> 1---2---3---4---5---6--NULL         |         7---8---9---10--NULL             |             11--12--NULL</pre><p>序列化其中的每一级之后：</p><pre>[1,2,3,4,5,6,null][7,8,9,10,null][11,12,null]</pre><p>为了将每一级都序列化到一起，我们需要每一级中添加值为 null 的元素，以表示没有节点连接到上一级的上级节点。</p><pre>[1,2,3,4,5,6,null][null,null,7,8,9,10,null][null,11,12,null]</pre><p>合并所有序列化结果，并去除末尾的 null 。</p><pre>[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]</pre><p>&nbsp;</p><p><strong>提示：</strong></p><ul>    <li>节点数目不超过 1000</li>    <li><code>1 &lt;= Node.val &lt;= 10^5</code></li></ul><div><div>Related Topics</div><div><li>深度优先搜索</li><li>链表</li></div></div><br/><p>这道题想了很久哎，最后看了答案，觉得用先序遍历最好理解。主要是多增加一个全局Node，然后先序遍历创建一个新的链表，最后把一开始的全局Node删除即可。</p><p>时间复杂度为O(n),空间复杂度O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Node globalHead = <span class="keyword">new</span> Node();</span><br><span class="line">    Node prev = globalHead;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">flatten</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        preOrderTravel(head);</span><br><span class="line">        head = globalHead.next;</span><br><span class="line">        head.prev = <span class="keyword">null</span>;</span><br><span class="line">        globalHead.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preOrderTravel</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node child = head.child;</span><br><span class="line">        Node next = head.next;</span><br><span class="line">        head.next = head.child = <span class="keyword">null</span>;</span><br><span class="line">        prev.next = head;</span><br><span class="line">        head.prev = prev;</span><br><span class="line">        prev = head;</span><br><span class="line">        preOrderTravel(child);</span><br><span class="line">        preOrderTravel(next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/06/20200609011655.png" alt=""></p><p><a href="https://leetcode-cn.com/problems/flatten-a-multilevel-doubly-linked-list/solution/bian-ping-hua-duo-ji-shuang-xiang-lian-biao-by-lee/">91算法打卡第八天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多级双向链表中，除了指向下一个节点和前一个节点指针之外，它还有一个子链表指针，可能指向单独的双向链表。这些子列表也可能会有一个或多个自己的子项，依此类推，生成多级数据结构，如下面的示例所示。&lt;/p&gt;

&lt;p&gt;给你位于列表第一级的头节点，请你扁平化列表，使所有结点出现在单级双链表中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>206_反转链表</title>
    <link href="https://www.codesboy.cn/2020/06/07/206_%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>https://www.codesboy.cn/2020/06/07/206_%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2020-06-07T13:21:24.000Z</published>
    <updated>2020-06-08T17:16:02.587Z</updated>
    
    <content type="html"><![CDATA[<p>反转一个单链表。</p><p><strong>示例:</strong></p><pre><strong>输入:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<strong>输出:</strong> 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</pre><a id="more"></a><p><strong>进阶:</strong><br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p><div><div>Related Topics</div><div><li>链表</li></div></div><br/><p>递归<br>递归里面还有while，时间复杂度为O(n^2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (head!=<span class="keyword">null</span>&amp;&amp;head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode node = reverseList(head.next);</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        ListNode lastNode = node;</span><br><span class="line">        <span class="keyword">while</span> (lastNode.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            lastNode = lastNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        lastNode.next = head;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/06/20200607165952.png" alt=""></p><p>迭代：<br>可以参考讲义的内容将如下内容进行优化，时间复杂度O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode temp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (head.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode tempHead = head;</span><br><span class="line">            head = head.next;</span><br><span class="line">            tempHead.next = temp;</span><br><span class="line">            temp = tempHead;</span><br><span class="line">        &#125;</span><br><span class="line">        head.next = temp;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/06/20200607170546.png" alt=""></p><p><a href="https://github.com/azl397985856/leetcode/blob/master/problems/206.reverse-linked-list.md">91算法打卡第七天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;反转一个单链表。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;strong&gt;输入:&lt;/strong&gt; 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL
&lt;strong&gt;输出:&lt;/strong&gt; 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL&lt;/pre&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>迪米特法则</title>
    <link href="https://www.codesboy.cn/2020/06/07/%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/"/>
    <id>https://www.codesboy.cn/2020/06/07/%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/</id>
    <published>2020-06-07T10:18:24.000Z</published>
    <updated>2020-06-07T12:53:18.391Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>一个对象应该对其他对象保存最少的了解</li></ol><a id="more"></a><ol start="2"><li>类与类关系越密切，耦合度越大</li><li>迪米特法则(Demeter Principle) 又叫<strong>最少知道原则</strong>，即一个类对自己依赖的类知道的越少越好。</li><li>迪米特法则还有一个更加简单的定义：只与直接的朋友通信</li><li><strong>直接的朋友：</strong>每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的关系很多，依赖，关联，组合，聚合等。其中，我们称出现<strong>成员变量，方法参数，方法返回值</strong>中的类为直接的朋友，而<strong>出现在局部变量中的类不是直接的朋友</strong>。也是就是说，陌生的类最好不要以局部变量的形式出现在类的内部中。</li></ol><p>代码例子：</p><p>有一个学校，下属有各个学院和总部，现要求打印出学校总部员工ID和学院员工的id</p><h4 id="反例："><a href="#反例：" class="headerlink" title="反例："></a>反例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//学院的员工类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollegeEmployee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学校的员工类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学院管理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollegeManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;CollegeEmployee&gt; <span class="title">getAllEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;CollegeEmployee&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            CollegeEmployee collegeEmployee = <span class="keyword">new</span> CollegeEmployee();</span><br><span class="line">            collegeEmployee.setId(<span class="string">"学院员工id="</span> + i);</span><br><span class="line">            list.add(collegeEmployee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//学校管理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchoolManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getAllEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employees = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">            employee.setId(<span class="string">"学校总部iD="</span>+i);</span><br><span class="line">            employees.add(employee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> employees;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法完成输出学校总部和学院员工信息（id）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAllEmp</span><span class="params">(CollegeManager sub)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.这里的CollegeEmployee 不是SchoolManager的直接朋友</span></span><br><span class="line">        <span class="comment">//1.CollegeEmployee 是以局部变量的方式出现在SchoolManager中，不符合迪米特法则</span></span><br><span class="line">        <span class="comment">//获取学院的员工</span></span><br><span class="line">        List&lt;CollegeEmployee&gt; allEmployee = sub.getAllEmployee();</span><br><span class="line">        <span class="keyword">for</span> (CollegeEmployee e:allEmployee</span><br><span class="line">             ) &#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取学校的员工</span></span><br><span class="line">        List&lt;Employee&gt; allEmployee1 = <span class="keyword">this</span>.getAllEmployee();</span><br><span class="line">        <span class="keyword">for</span> (Employee e :</span><br><span class="line">            allEmployee1) &#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demeter1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SchoolManager schoolManager = <span class="keyword">new</span> SchoolManager();</span><br><span class="line">        schoolManager.printAllEmp(<span class="keyword">new</span> CollegeManager());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码64行，CollegeEmployee 不是SchoolManager的直接朋友，它是以局部变量的方式出现在SchoolManager中，不符合迪米特法则。</p><h4 id="改进："><a href="#改进：" class="headerlink" title="改进："></a>改进：</h4><p>思路：我们只需要将打印学院员工编号的逻辑移到CollegeManager ，然后 SchoolManager 再调用CollegeManager的打印方法即可。这样就符合迪米特法则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//学院管理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollegeManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;CollegeEmployee&gt; <span class="title">getAllEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;CollegeEmployee&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            CollegeEmployee collegeEmployee = <span class="keyword">new</span> CollegeEmployee();</span><br><span class="line">            collegeEmployee.setId(<span class="string">"学院员工id="</span> + i);</span><br><span class="line">            list.add(collegeEmployee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法完成输出学校总部和学院员工信息（id）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAllEmp</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;CollegeEmployee&gt; allEmployee = getAllEmployee();</span><br><span class="line">        <span class="keyword">for</span> (CollegeEmployee e:allEmployee</span><br><span class="line">        ) &#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学校管理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchoolManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getAllEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employees = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">            employee.setId(<span class="string">"学校总部iD="</span>+i);</span><br><span class="line">            employees.add(employee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> employees;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法完成输出学校总部和学院员工信息（id）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printAllEmp</span><span class="params">(CollegeManager sub)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        sub.printAllEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取学校的员工</span></span><br><span class="line">        List&lt;Employee&gt; allEmployee1 = <span class="keyword">this</span>.getAllEmployee();</span><br><span class="line">        <span class="keyword">for</span> (Employee e :</span><br><span class="line">            allEmployee1) &#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迪米特法则注意事项和细节："><a href="#迪米特法则注意事项和细节：" class="headerlink" title="迪米特法则注意事项和细节："></a>迪米特法则注意事项和细节：</h4><ol><li>迪米特法则的核心是降低类之间的耦合</li><li>但是注意：迪米特法则只是要求降低类间（对象间）耦合关系，并不是要求完成没有依赖关系</li></ol><p>代码地址：<a href="https://github.com/GilbertXiao/JavaDesignPatterns">https://github.com/GilbertXiao/JavaDesignPatterns</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;一个对象应该对其他对象保存最少的了解&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.codesboy.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.codesboy.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>合成复用原则</title>
    <link href="https://www.codesboy.cn/2020/06/07/%E5%90%88%E6%88%90%E5%A4%8D%E7%94%A8%E5%8E%9F%E5%88%99/"/>
    <id>https://www.codesboy.cn/2020/06/07/%E5%90%88%E6%88%90%E5%A4%8D%E7%94%A8%E5%8E%9F%E5%88%99/</id>
    <published>2020-06-07T10:18:24.000Z</published>
    <updated>2020-06-07T17:09:38.239Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>原则是尽量使用合成/聚合的方式，而不是使用继承</p><a id="more"></a><h4 id="设计原则核心思想"><a href="#设计原则核心思想" class="headerlink" title="设计原则核心思想"></a>设计原则核心思想</h4><ol><li>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起</li><li>针对接口编程，而不是针对实现编程</li><li>尽可能实现<strong>松耦合设计</strong></li></ol><h4 id="合成复用原则的重要性"><a href="#合成复用原则的重要性" class="headerlink" title="合成复用原则的重要性"></a>合成复用原则的重要性</h4><p>通常类的复用分为继承复用和合成复用两种，继承复用虽然有简单和易实现的优点，但它也存在以下缺点：</p><ul><li>继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用。</li><li>子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。</li><li>它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。</li></ul><p>采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点：</p><ul><li>它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用。</li><li>新旧类之间的耦合度低。这种复用所需的依赖较少，新对象存取成分对象的唯一方法是通过成分对象的接口。</li><li>复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。</li></ul><h4 id="合成复用原则的实现方法"><a href="#合成复用原则的实现方法" class="headerlink" title="合成复用原则的实现方法"></a>合成复用原则的实现方法</h4><p>合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用。</p><p>下面以摩托车分类管理程序为例来介绍合成复用原则的应用。</p><p>分析：摩托车按“动力源”划分可分为汽油摩托车、电动摩托车等；按“颜色”划分可分为白色摩托车、黑色摩托车和红色摩托车等。如果同时考虑这两种分类，其组合就很多。如下所示是用继承关系实现的摩托车分类的类图。</p><p><img src="http://img.codesboy.cn/2020/06/20200608004728.png" alt=""></p><p>我们可以看出用继承关系实现会产生很多子类，而且增加新的“动力源”或者增加新的“颜色”都要修改源代码，这违背了开闭原则，显然不可取。但如果改用组合关系实现就能很好地解决以上问题，其类图如下 所示。</p><p><img src="http://img.codesboy.cn/2020/06/20200608010553.png" alt=""></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>结合前几节的内容，我们一共介绍了 7种设计原则，它们分别为开闭原则、里氏替换原则、依赖倒置原则、单一职责原则、接口隔离原则、迪米特法则和本节所介绍的合成复用原则。</p><p>这 7 种设计原则是软件设计模式必须尽量遵循的原则，各种原则要求的侧重点不同。其中，开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭；里氏替换原则告诉我们不要破坏继承体系；依赖倒置原则告诉我们要面向接口编程；单一职责原则告诉我们实现类要职责单一；接口隔离原则告诉我们在设计接口的时候要精简单一；迪米特法则告诉我们要降低耦合度；合成复用原则告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h4&gt;&lt;p&gt;原则是尽量使用合成/聚合的方式，而不是使用继承&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.codesboy.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.codesboy.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>380_常数时间插入、删除和获取随机元素</title>
    <link href="https://www.codesboy.cn/2020/06/06/380_%E5%B8%B8%E6%95%B0%E6%97%B6%E9%97%B4%E6%8F%92%E5%85%A5%E3%80%81%E5%88%A0%E9%99%A4%E5%92%8C%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E5%85%83%E7%B4%A0/"/>
    <id>https://www.codesboy.cn/2020/06/06/380_%E5%B8%B8%E6%95%B0%E6%97%B6%E9%97%B4%E6%8F%92%E5%85%A5%E3%80%81%E5%88%A0%E9%99%A4%E5%92%8C%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E5%85%83%E7%B4%A0/</id>
    <published>2020-06-06T13:21:24.000Z</published>
    <updated>2020-06-07T09:18:00.834Z</updated>
    
    <content type="html"><![CDATA[<p>设计一个支持在<em>平均&nbsp;</em>时间复杂度 <strong>O(1)</strong>&nbsp;下，执行以下操作的数据结构。</p><ol>    <li><code>insert(val)</code>：当元素 val 不存在时，向集合中插入该项。</li>    <li><code>remove(val)</code>：元素 val 存在时，从集合中移除该项。</li>    <li><code>getRandom</code>：随机返回现有集合中的一项。每个元素应该有<strong>相同的概率</strong>被返回。</li></ol><a id="more"></a><p><strong>示例 :</strong></p><pre>// 初始化一个空的集合。RandomizedSet randomSet = new RandomizedSet();// 向集合中插入 1 。返回 true 表示 1 被成功地插入。randomSet.insert(1);// 返回 false ，表示集合中不存在 2 。randomSet.remove(2);// 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。randomSet.insert(2);// getRandom 应随机返回 1 或 2 。randomSet.getRandom();// 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。randomSet.remove(1);// 2 已在集合中，所以返回 false 。randomSet.insert(2);// 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。randomSet.getRandom();</pre><div><div>Related Topics</div><div><li>设计</li><li>数组</li><li>哈希表</li></div></div><br/><p>有想到数组加hashmap，但是一直没想到remove掉数组中的随机某个数后，怎么很好的填补这个空缺，以及纠结这个随机数不连贯了怎么办的问题。最后无奈看了小伙伴的解答，恍然大悟，拿最后一个数去填补，而不是我一开始设想的下次insert再去填补。。。get</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomizedSet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, Integer&gt; map;</span><br><span class="line">    List&lt;Integer&gt; list;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RandomizedSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        Integer result = map.get(val);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">            list.add(val);</span><br><span class="line">            map.put(val, list.size() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Removes a value from the set. Returns true if the set contained the specified element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        Integer listIndex = map.get(val);</span><br><span class="line">        <span class="keyword">if</span> (listIndex == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(list.get(list.size() - <span class="number">1</span>), listIndex);</span><br><span class="line">        map.remove(val);</span><br><span class="line">        list.set(listIndex, list.get(list.size() - <span class="number">1</span>));</span><br><span class="line">        list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Get a random element from the set. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> randomIndex = random.nextInt(list.size());</span><br><span class="line">        <span class="keyword">return</span> list.get(randomIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/06/20200607010843.png" alt=""></p><p><a href="https://github.com/leetcode-pp/91alg-1/issues/23#issuecomment-640155651">91算法打卡第六天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设计一个支持在&lt;em&gt;平均&amp;nbsp;&lt;/em&gt;时间复杂度 &lt;strong&gt;O(1)&lt;/strong&gt;&amp;nbsp;下，执行以下操作的数据结构。&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;&lt;code&gt;insert(val)&lt;/code&gt;：当元素 val 不存在时，向集合中插入该项。&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;remove(val)&lt;/code&gt;：元素 val 存在时，从集合中移除该项。&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;getRandom&lt;/code&gt;：随机返回现有集合中的一项。每个元素应该有&lt;strong&gt;相同的概率&lt;/strong&gt;被返回。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>232_用栈实现队列</title>
    <link href="https://www.codesboy.cn/2020/06/05/232_%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>https://www.codesboy.cn/2020/06/05/232_%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</id>
    <published>2020-06-05T13:21:24.000Z</published>
    <updated>2020-06-05T18:05:52.039Z</updated>
    
    <content type="html"><![CDATA[<p>使用栈实现队列的下列操作：</p><ul>    <li>push(x) -- 将一个元素放入队列的尾部。</li>    <li>pop() -- 从队列首部移除元素。</li>    <li>peek() -- 返回队列首部的元素。</li>    <li>empty() -- 返回队列是否为空。</li></ul><a id="more"></a><p><strong>示例:</strong></p><pre>MyQueue queue = new MyQueue();queue.push(1);queue.push(2);  queue.peek();  // 返回 1queue.pop();   // 返回 1queue.empty(); // 返回 false</pre><p><strong>说明:</strong></p><ul>    <li>你只能使用标准的栈操作 -- 也就是只有&nbsp;<code>push to top</code>,&nbsp;<code>peek/pop from top</code>,&nbsp;<code>size</code>, 和&nbsp;<code>is empty</code>&nbsp;操作是合法的。</li>    <li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li>    <li>假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。</li></ul><div><div>Related Topics</div><div><li>栈</li><li>设计</li></div></div><br/><p>用了两个栈，一个是对外输出栈stack（里面的元素一直符合先入先出），一个是备用栈bakStack。当push操作时，先看下stack是否为空，stack不为空则把元素push到bakStack中。当pop操作时，先把stack里面的元素pop出来，然后再判断stack是否为空，如果stack为空，这时候把bakStack的元素全部补充进stack，注意，这步操作后，stack的元素为正序，即符合先入先出了。</p><p>空间复杂度 O(n)，<br>时间复杂度 push 操作O(1)， pop 操作 O(n)，peek操作O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Integer&gt; stack;</span><br><span class="line">    Stack&lt;Integer&gt; bakStack;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stack=<span class="keyword">new</span> Stack();</span><br><span class="line">        <span class="keyword">this</span>.bakStack = <span class="keyword">new</span> Stack();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!stack.isEmpty())&#123;</span><br><span class="line">            bakStack.push(x);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            stack.push(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> temp = stack.pop();</span><br><span class="line">       <span class="keyword">if</span>(stack.isEmpty())&#123;</span><br><span class="line">           <span class="keyword">while</span>(!bakStack.isEmpty())&#123;</span><br><span class="line">               stack.push(bakStack.pop());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the front element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/06/20200605023728.png" alt=""></p><p><a href="https://github.com/leetcode-pp/91alg-1/issues/21#issuecomment-639573715">91算法打卡第五天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用栈实现队列的下列操作：&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;push(x) -- 将一个元素放入队列的尾部。&lt;/li&gt;
    &lt;li&gt;pop() -- 从队列首部移除元素。&lt;/li&gt;
    &lt;li&gt;peek() -- 返回队列首部的元素。&lt;/li&gt;
    &lt;li&gt;empty() -- 返回队列是否为空。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>394_字符串解码</title>
    <link href="https://www.codesboy.cn/2020/06/04/394_%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81/"/>
    <id>https://www.codesboy.cn/2020/06/04/394_%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81/</id>
    <published>2020-06-04T13:21:24.000Z</published>
    <updated>2020-06-05T18:05:54.562Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个经过编码的字符串，返回它解码后的字符串。</p><p>编码规则为: <code>k[encoded_string]</code>，表示其中方括号内部的 <em>encoded_string</em> 正好重复 <em>k</em> 次。注意 <em>k</em> 保证为正整数。</p><p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p><a id="more"></a><p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 <em>k</em> ，例如不会出现像&nbsp;<code>3a</code>&nbsp;或&nbsp;<code>2[4]</code>&nbsp;的输入。</p><p>&nbsp;</p><p><strong>示例 1：</strong></p><pre><strong>输入：</strong>s = &quot;3[a]2[bc]&quot;<strong>输出：</strong>&quot;aaabcbc&quot;</pre><p><strong>示例 2：</strong></p><pre><strong>输入：</strong>s = &quot;3[a2[c]]&quot;<strong>输出：</strong>&quot;accaccacc&quot;</pre><p><strong>示例 3：</strong></p><pre><strong>输入：</strong>s = &quot;2[abc]3[cd]ef&quot;<strong>输出：</strong>&quot;abcabccdcdcdef&quot;</pre><p><strong>示例 4：</strong></p><pre><strong>输入：</strong>s = &quot;abc3[cd]xyz&quot;<strong>输出：</strong>&quot;abccdcdcdxyz&quot;</pre><div><div>Related Topics</div><div><li>栈</li><li>深度优先搜索</li></div></div><br/><p>这道题写了超级久，原来用了两个栈，一个队列，然后没法一条路走到黑就放弃了。群里有个人评价博主的方法聪明，从栈里面拿出来计算好再放回去栈里面，一下子点醒我。然后问题迎刃而解。谢谢小伙伴~</p><p>时间复杂度O(n)，空间复杂度O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decodeString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String sb = <span class="string">""</span>;</span><br><span class="line">        Stack&lt;String&gt; strStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            String word = <span class="string">""</span>;</span><br><span class="line">            String repeatCount = <span class="string">""</span>;</span><br><span class="line">            StringBuilder repeatWordSb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">if</span> (chars[i] == <span class="string">']'</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!strStack.isEmpty() &amp;&amp; !strStack.peek().equals(<span class="string">"["</span>)) &#123;</span><br><span class="line">                    word = strStack.pop().toString() + word;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (strStack.peek().equals(<span class="string">"["</span>)) &#123;</span><br><span class="line">                    strStack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (!strStack.isEmpty() &amp;&amp; isNumber(strStack.peek())) &#123;</span><br><span class="line">                    repeatCount = strStack.pop().toString() + repeatCount;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Integer.valueOf(repeatCount); j++) &#123;</span><br><span class="line">                    repeatWordSb.append(word);</span><br><span class="line">                &#125;</span><br><span class="line">                strStack.push(repeatWordSb.toString());</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                strStack.push(String.valueOf(chars[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!strStack.isEmpty()) &#123;</span><br><span class="line">            sb = strStack.pop() + sb;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNumber</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        Pattern compile = Pattern.compile(<span class="string">"^[0-9]*$"</span>);</span><br><span class="line">        <span class="keyword">return</span> compile.matcher(str).matches();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加油~</p><p><img src="http://img.codesboy.cn/2020/06/20200605012145.png" alt=""></p><p><a href="https://github.com/leetcode-pp/91alg-1/issues/20#issuecomment-638800071">91算法打卡第四天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个经过编码的字符串，返回它解码后的字符串。&lt;/p&gt;

&lt;p&gt;编码规则为: &lt;code&gt;k[encoded_string]&lt;/code&gt;，表示其中方括号内部的 &lt;em&gt;encoded_string&lt;/em&gt; 正好重复 &lt;em&gt;k&lt;/em&gt; 次。注意 &lt;em&gt;k&lt;/em&gt; 保证为正整数。&lt;/p&gt;

&lt;p&gt;你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>1381_设计一个支持增量操作的栈</title>
    <link href="https://www.codesboy.cn/2020/06/03/1381_%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E5%A2%9E%E9%87%8F%E6%93%8D%E4%BD%9C%E7%9A%84%E6%A0%88/"/>
    <id>https://www.codesboy.cn/2020/06/03/1381_%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E5%A2%9E%E9%87%8F%E6%93%8D%E4%BD%9C%E7%9A%84%E6%A0%88/</id>
    <published>2020-06-03T13:21:24.000Z</published>
    <updated>2020-06-05T18:05:58.678Z</updated>
    
    <content type="html"><![CDATA[<p>请你设计一个支持下述操作的栈。</p><p>实现自定义栈类 <code>CustomStack</code> ：</p><ul>    <li><code>CustomStack(int maxSize)</code>：用 <code>maxSize</code> 初始化对象，<code>maxSize</code> 是栈中最多能容纳的元素数量，栈在增长到 <code>maxSize</code> 之后则不支持 <code>push</code> 操作。</li>    <li><code>void push(int x)</code>：如果栈还未增长到 <code>maxSize</code> ，就将 <code>x</code> 添加到栈顶。</li>    <li><code>int pop()</code>：弹出栈顶元素，并返回栈顶的值，或栈为空时返回 <strong>-1</strong> 。</li>    <li><code>void inc(int k, int val)</code>：栈底的 <code>k</code> 个元素的值都增加 <code>val</code> 。如果栈中元素总数小于 <code>k</code> ，则栈中的所有元素都增加 <code>val</code> 。</li></ul><a id="more"></a><p>&nbsp;</p><p><strong>示例：</strong></p><pre><strong>输入：</strong>[&quot;CustomStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;pop&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;increment&quot;,&quot;increment&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;][[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]<strong>输出：</strong>[null,null,null,2,null,null,null,null,null,103,202,201,-1]<strong>解释：</strong>CustomStack customStack = new CustomStack(3); // 栈是空的 []customStack.push(1);                          // 栈变为 [1]customStack.push(2);                          // 栈变为 [1, 2]customStack.pop();                            // 返回 2 --&gt; 返回栈顶值 2，栈变为 [1]customStack.push(2);                          // 栈变为 [1, 2]customStack.push(3);                          // 栈变为 [1, 2, 3]customStack.push(4);                          // 栈仍然是 [1, 2, 3]，不能添加其他元素使栈大小变为 4customStack.increment(5, 100);                // 栈变为 [101, 102, 103]customStack.increment(2, 100);                // 栈变为 [201, 202, 103]customStack.pop();                            // 返回 103 --&gt; 返回栈顶值 103，栈变为 [201, 202]customStack.pop();                            // 返回 202 --&gt; 返回栈顶值 202，栈变为 [201]customStack.pop();                            // 返回 201 --&gt; 返回栈顶值 201，栈变为 []customStack.pop();                            // 返回 -1 --&gt; 栈为空，返回 -1</pre><p>&nbsp;</p><p><strong>提示：</strong></p><ul>    <li><code>1 &lt;= maxSize &lt;= 1000</code></li>    <li><code>1 &lt;= x &lt;= 1000</code></li>    <li><code>1 &lt;= k &lt;= 1000</code></li>    <li><code>0 &lt;= val &lt;= 100</code></li>    <li>每种方法 <code>increment</code>，<code>push</code> 以及 <code>pop</code> 分别最多调用 <code>1000</code> 次</li></ul><div><div>Related Topics</div><div><li>栈</li><li>设计</li></div></div><br/><p>这道题感觉不是很难，一看到就有思路了。首先考虑数据结构，栈不行，不然在incr 这个方法会比较麻烦；链表不行，因为查找比较麻烦；所以就选择数组。<br>push方法的时间复杂度为O(1), pop方法的时间复杂度为O(1)，incr 方法的时间复杂度为O(n)。<br>空间复杂度，O(n)， 用了一个数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomStack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Integer[] stack;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CustomStack</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">            <span class="keyword">this</span>.index = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">this</span>.stack = <span class="keyword">new</span> Integer[maxSize];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (index &gt;= maxSize - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.stack[++index] = x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> result = <span class="keyword">this</span>.stack[index];</span><br><span class="line">            <span class="keyword">this</span>.stack[index--] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> min = k &gt;= index + <span class="number">1</span> ? index + <span class="number">1</span> : k;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; min; i++) &#123;</span><br><span class="line">                <span class="keyword">this</span>.stack[i] += val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/06/20200603204522.png" alt=""></p><p><a href="https://github.com/leetcode-pp/91alg-1/issues/18#issuecomment-638268279">91算法打卡第三天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;请你设计一个支持下述操作的栈。&lt;/p&gt;

&lt;p&gt;实现自定义栈类 &lt;code&gt;CustomStack&lt;/code&gt; ：&lt;/p&gt;



&lt;ul&gt;
    &lt;li&gt;&lt;code&gt;CustomStack(int maxSize)&lt;/code&gt;：用 &lt;code&gt;maxSize&lt;/code&gt; 初始化对象，&lt;code&gt;maxSize&lt;/code&gt; 是栈中最多能容纳的元素数量，栈在增长到 &lt;code&gt;maxSize&lt;/code&gt; 之后则不支持 &lt;code&gt;push&lt;/code&gt; 操作。&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;void push(int x)&lt;/code&gt;：如果栈还未增长到 &lt;code&gt;maxSize&lt;/code&gt; ，就将 &lt;code&gt;x&lt;/code&gt; 添加到栈顶。&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;int pop()&lt;/code&gt;：弹出栈顶元素，并返回栈顶的值，或栈为空时返回 &lt;strong&gt;-1&lt;/strong&gt; 。&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;void inc(int k, int val)&lt;/code&gt;：栈底的 &lt;code&gt;k&lt;/code&gt; 个元素的值都增加 &lt;code&gt;val&lt;/code&gt; 。如果栈中元素总数小于 &lt;code&gt;k&lt;/code&gt; ，则栈中的所有元素都增加 &lt;code&gt;val&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>75_颜色分类</title>
    <link href="https://www.codesboy.cn/2020/06/02/75_%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB/"/>
    <id>https://www.codesboy.cn/2020/06/02/75_%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB/</id>
    <published>2020-06-02T13:21:24.000Z</published>
    <updated>2020-06-05T18:05:49.176Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个包含红色、白色和蓝色，一共&nbsp;<em>n </em>个元素的数组，<strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95" target="_blank">原地</a></strong>对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p><a id="more"></a><p>此题中，我们使用整数 0、&nbsp;1 和 2 分别表示红色、白色和蓝色。</p><p><strong>注意:</strong><br>不能使用代码库中的排序函数来解决这道题。</p><p><strong>示例:</strong></p><pre><strong>输入:</strong> [2,0,2,1,1,0]<strong>输出:</strong> [0,0,1,1,2,2]</pre><p><strong>进阶：</strong></p><ul>    <li>一个直观的解决方案是使用计数排序的两趟扫描算法。<br>    首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。</li>    <li>你能想出一个仅使用常数空间的一趟扫描算法吗？</li></ul><div><div>Related Topics</div><div><li>排序</li><li>数组</li><li>双指针</li></div></div><p>不知道这样符合群主要求不？过了leetcode的。不过觉得确实不好。这个方法是早上看了一个公众号借鉴的，不过看了其他同学的答案，又回过头看了公众号，自己应该是没有领悟到该方法的精髓。</p><p>该方法是假设有三个挡板，i , j ,k 。[0,i) 存1，[i,j) 存2，(k,nums.length -1] 存3 , [j,k] 为未排序区</p><p>//伪代码如下</p><p>while (j&lt;=k){<br>    //穷尽各种可能性，毕竟只有三种数字。<br>}<br>时间复杂度 O(n)，空间复杂度O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">int</span> k = nums.length -<span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">while</span> (j&lt;=k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[j]==<span class="number">1</span>)&#123;</span><br><span class="line">                j++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[k]==<span class="number">2</span>)&#123;</span><br><span class="line">                k--;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==<span class="number">1</span>&amp;&amp;nums[j]==<span class="number">0</span>)&#123;</span><br><span class="line">                nums[i]=<span class="number">0</span>;</span><br><span class="line">                nums[j]=<span class="number">1</span>;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==<span class="number">2</span>&amp;&amp;nums[k]==<span class="number">0</span>)&#123;</span><br><span class="line">                nums[i]=<span class="number">0</span>;</span><br><span class="line">                nums[k]=<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">                k--;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[j]==<span class="number">2</span>&amp;&amp;nums[k]==<span class="number">0</span>)&#123;</span><br><span class="line">                nums[j]=<span class="number">0</span>;</span><br><span class="line">                nums[k]=<span class="number">2</span>;</span><br><span class="line">                k--;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[j]==<span class="number">2</span>&amp;&amp;nums[k]==<span class="number">1</span>)&#123;</span><br><span class="line">                nums[j]=<span class="number">1</span>;</span><br><span class="line">                nums[k]=<span class="number">2</span>;</span><br><span class="line">                j++;</span><br><span class="line">                k--;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进：</p><p>时间复杂度 O(n)，空间复杂度O(1)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    </span><br><span class="line">    private void swap(int[] nums,int left, int right)&#123;</span><br><span class="line">        int temp &#x3D; nums[left];</span><br><span class="line">        nums[left] &#x3D; nums[right];</span><br><span class="line">        nums[right] &#x3D; temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void sortColors(int[] nums) &#123;</span><br><span class="line">        int i &#x3D; 0 ;</span><br><span class="line">        int cur &#x3D; 0;</span><br><span class="line">        int k &#x3D; nums.length -1 ;</span><br><span class="line">        while ( i &lt;&#x3D; k &amp;&amp; cur &lt;&#x3D; k )&#123;</span><br><span class="line">            if(nums[cur]&#x3D;&#x3D;0)&#123;</span><br><span class="line">                swap(nums,cur,i);</span><br><span class="line">                i++;</span><br><span class="line">                cur++;</span><br><span class="line">            &#125;else if(nums[cur]&#x3D;&#x3D;1)&#123;</span><br><span class="line">                cur++;</span><br><span class="line">            &#125;else if(nums[cur]&#x3D;&#x3D;2)&#123;</span><br><span class="line">                swap(nums,cur,k);</span><br><span class="line">                k--;</span><br><span class="line">                &#x2F;&#x2F;cur++; 无法确定换回来的数是什么，所以不能加这个。</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/06/20200602022909.png" alt=""></p><p><a href="https://github.com/leetcode-pp/91alg-1/issues/15#issuecomment-637651551">91算法打卡第二天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个包含红色、白色和蓝色，一共&amp;nbsp;&lt;em&gt;n &lt;/em&gt;个元素的数组，&lt;strong&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;原地&lt;/a&gt;&lt;/strong&gt;对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>66_加一</title>
    <link href="https://www.codesboy.cn/2020/06/01/66_%E5%8A%A0%E4%B8%80/"/>
    <id>https://www.codesboy.cn/2020/06/01/66_%E5%8A%A0%E4%B8%80/</id>
    <published>2020-06-01T13:21:24.000Z</published>
    <updated>2020-06-05T18:05:42.255Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个由<strong>整数</strong>组成的<strong>非空</strong>数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储<strong>单个</strong>数字。</p><a id="more"></a><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p><p><strong>示例&nbsp;1:</strong></p><pre><strong>输入:</strong> [1,2,3]<strong>输出:</strong> [1,2,4]<strong>解释:</strong> 输入数组表示数字 123。</pre><p><strong>示例&nbsp;2:</strong></p><pre><strong>输入:</strong> [4,3,2,1]<strong>输出:</strong> [4,3,2,2]<strong>解释:</strong> 输入数组表示数字 4321。</pre><div><div>Related Topics</div><div><li>数组</li></div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = digits.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(digits[i]+<span class="number">1</span>==<span class="number">10</span>)&#123;</span><br><span class="line">                digits[i]=<span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                digits[i]+=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//the old digits is 9 or 99 and so on </span></span><br><span class="line">        <span class="keyword">if</span>(digits[<span class="number">0</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] newDigits=<span class="keyword">new</span> <span class="keyword">int</span>[digits.length+<span class="number">1</span>];</span><br><span class="line">            newDigits[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> newDigits;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以前有做过，当回顾~ 第一天打卡(^__^)</p><p><a href="https://github.com/leetcode-pp/91alg-1/issues/1#issuecomment-636883697">91算法打卡第一天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个由&lt;strong&gt;整数&lt;/strong&gt;组成的&lt;strong&gt;非空&lt;/strong&gt;数组所表示的非负整数，在该数的基础上加一。&lt;/p&gt;

&lt;p&gt;最高位数字存放在数组的首位， 数组中每个元素只存储&lt;strong&gt;单个&lt;/strong&gt;数字。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>数组_88合并两个有序数组</title>
    <link href="https://www.codesboy.cn/2020/05/23/%E6%95%B0%E7%BB%84_88%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>https://www.codesboy.cn/2020/05/23/%E6%95%B0%E7%BB%84_88%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</id>
    <published>2020-05-23T15:21:24.000Z</published>
    <updated>2020-06-05T18:06:15.125Z</updated>
    
    <content type="html"><![CDATA[<p>给你两个有序整数数组&nbsp;<em>nums1 </em>和 <em>nums2</em>，请你将 <em>nums2 </em>合并到&nbsp;<em>nums1&nbsp;</em>中<em>，</em>使 <em>nums1 </em>成为一个有序数组。</p><a id="more"></a><p>&nbsp;</p><p><strong>说明:</strong></p><ul>    <li>初始化&nbsp;<em>nums1</em> 和 <em>nums2</em> 的元素数量分别为&nbsp;<em>m</em> 和 <em>n </em>。</li>    <li>你可以假设&nbsp;<em>nums1&nbsp;</em>有足够的空间（空间大小大于或等于&nbsp;<em>m + n</em>）来保存 <em>nums2</em> 中的元素。</li></ul><p>&nbsp;</p><p><strong>示例:</strong></p><pre><strong>输入:</strong>nums1 = [1,2,3,0,0,0], m = 3nums2 = [2,5,6],       n = 3<strong>输出:</strong>&nbsp;[1,2,2,3,5,6]</pre><div><div>Related Topics</div><div><li>数组</li><li>双指针</li></div></div><br><p>这道题还是蛮简单的，只要注意参数m 和 n 就好。<br><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p=m+n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(m&gt;<span class="number">0</span>||n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            p--;</span><br><span class="line">            <span class="comment">//exist m and n ,compare</span></span><br><span class="line">            <span class="keyword">if</span>(m&gt;<span class="number">0</span>&amp;&amp;n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums1[m-<span class="number">1</span>]&gt;nums2[n-<span class="number">1</span>])&#123;</span><br><span class="line">                    nums1[p] = nums1[m - <span class="number">1</span>];</span><br><span class="line">                    m--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    nums1[p] = nums2[n - <span class="number">1</span>];</span><br><span class="line">                    n--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//only exits m,move m </span></span><br><span class="line">            <span class="keyword">if</span>(m&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                nums1[p] = nums1[m - <span class="number">1</span>];</span><br><span class="line">                m--;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//only exits n,move n </span></span><br><span class="line">            <span class="keyword">if</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                nums1[p] = nums2[n - <span class="number">1</span>];</span><br><span class="line">                n--;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给你两个有序整数数组&amp;nbsp;&lt;em&gt;nums1 &lt;/em&gt;和 &lt;em&gt;nums2&lt;/em&gt;，请你将 &lt;em&gt;nums2 &lt;/em&gt;合并到&amp;nbsp;&lt;em&gt;nums1&amp;nbsp;&lt;/em&gt;中&lt;em&gt;，&lt;/em&gt;使 &lt;em&gt;nums1 &lt;/em&gt;成为一个有序数组。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>开闭原则</title>
    <link href="https://www.codesboy.cn/2020/05/23/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/"/>
    <id>https://www.codesboy.cn/2020/05/23/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/</id>
    <published>2020-05-23T10:18:24.000Z</published>
    <updated>2020-05-23T13:07:15.204Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>开闭原则（Open Closed Principle） 是编程中<strong>最基础、最重要</strong>的设计原则</li></ol><a id="more"></a><ol start="2"><li>一个软件实体如类，模块和函数应该<strong>对扩展开放（对提供方），对修改关闭（对使用方）</strong>。<br> 就比如开发新需求，你大可以扩展代码，但是你要确保原先的调用者不用发生一丁点变化。</li><li>当软件需要变化时，尽量通过<strong>扩展软件实体</strong>的行为来实现变化，而不是通过修改已有的代码来实现变化。</li><li>编程中使用设计模式的目的就是为了遵循开闭原则。</li></ol><h4 id="反例："><a href="#反例：" class="headerlink" title="反例："></a>反例：</h4><p><img src="http://img.codesboy.cn/20200523185126.png" alt=""></p><p>代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> shapeType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.shapeType=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.shapeType=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个用于绘图的类【使用方】</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphicEditor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">(Shape s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.shapeType==<span class="number">1</span>) &#123;</span><br><span class="line">            drawRectangle(s);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (s.shapeType==<span class="number">2</span>)&#123;</span><br><span class="line">            drawCircle(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(Shape s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"绘制圆形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawRectangle</span><span class="params">(Shape s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"绘制矩形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GraphicEditor graphicEditor = <span class="keyword">new</span> GraphicEditor();</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> Rectangle());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> Circle());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/20200523203028.png" alt=""></p><p>如上设计，当我们要绘制一个新的图形，比如三角形，我们一定要动到GraphicEditor这个使用方的类，这样就违反了开闭原则了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Triangle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.shapeType=<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphicEditor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">(Shape s)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//省略重复代码...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s.shapeType==<span class="number">2</span>)&#123;</span><br><span class="line">            drawTriangle(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawTriangle</span><span class="params">(Shape s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"绘制三角形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="正例："><a href="#正例：" class="headerlink" title="正例："></a>正例：</h4><p>思路： 我们在shape类中提供一个抽象方法，让子类去实现即可。这样当我们有新的图形类继承的时候，实现draw方法即可，也避免修改使用方的代码，从而满足开闭原则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> shapeType;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.shapeType=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"绘制矩形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.shapeType=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"绘制圆形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个用于绘图的类【使用方】</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphicEditor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">(Shape s)</span></span>&#123;</span><br><span class="line">        s.drawShape();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GraphicEditor graphicEditor = <span class="keyword">new</span> GraphicEditor();</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> Rectangle());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> Circle());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如 依赖倒转原则的正例，也是符合开闭原则的范例，可以回顾下~</p><p>代码地址：<a href="https://github.com/GilbertXiao/JavaDesignPatterns">https://github.com/GilbertXiao/JavaDesignPatterns</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;开闭原则（Open Closed Principle） 是编程中&lt;strong&gt;最基础、最重要&lt;/strong&gt;的设计原则&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.codesboy.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.codesboy.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>里氏替换原则</title>
    <link href="https://www.codesboy.cn/2020/05/23/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/"/>
    <id>https://www.codesboy.cn/2020/05/23/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/</id>
    <published>2020-05-23T06:18:24.000Z</published>
    <updated>2020-06-07T10:54:14.982Z</updated>
    
    <content type="html"><![CDATA[<h4 id="OO中的继承性的思考和说明"><a href="#OO中的继承性的思考和说明" class="headerlink" title="OO中的继承性的思考和说明"></a>OO中的继承性的思考和说明</h4><ul><li>继承包含这样一层含义： 父类中凡是已经实现好的方法，实际上是在设计规范，虽然它不强制要求所有子类必须遵循这些规范，但是如果子类如果对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。</li></ul><a id="more"></a><ul><li><strong>继承给程序设计带来便利的同时，也带来了弊端</strong>。比如使用了继承，父类的任何改动都得考虑到所有继承的子类，并且父类修改后，所有涉及到的子类功能都有可能产生故障。</li></ul><p>问题提出：如何正确使用继承？ <strong>里氏替换原则</strong></p><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>里氏替换原则（Liskov Substitution Principle）在1988年，由麻省理工学院的一位姓里的女士提出的。</li><li>如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都换成o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。换句话说，<strong>所有引用基类的地方都必须能透明地使用其子类对象</strong>。</li><li>在使用继承时，遵循里氏替换原则，在<strong>子类中尽量不要重写父类的方法</strong>。</li><li>里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过<strong>聚合，组合，依赖来解决问题</strong>。</li></ol><h4 id="反例："><a href="#反例：" class="headerlink" title="反例："></a>反例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//a + b</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">function1</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//change function1 of A by accident</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">function1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        System.out.println(<span class="string">"1+2="</span>+a.function1(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">"2+3="</span>+a.function1(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        A b = <span class="keyword">new</span> B();</span><br><span class="line">        System.out.println(<span class="string">"1+2="</span>+b.function1(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">//没想到B 已经改了继承的方法，造成结果错误</span></span><br><span class="line">        System.out.println(<span class="string">"2+3="</span>+b.function1(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="http://img.codesboy.cn/20200523172531.png" alt=""></p><p>解决方法：</p><ol><li>B类不小心改了A类的方法，导致调用出错。在实际开发中，我们常常会通过修改父类的方法完成新的功能，这样写起来虽然简单，但是整个继承体系复用性比较差。</li><li>通用的做法是：将原来的父类和子类都继承一个更加通用的基类，原有的继承关系去掉，采用<strong>依赖，聚合，组合</strong>等方式代替。</li></ol><p>改进后的方案如下：</p><p><img src="http://img.codesboy.cn/20200523174951.png" alt=""></p><h4 id="正例："><a href="#正例：" class="headerlink" title="正例："></a>正例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Integer <span class="title">function1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">    <span class="comment">//a + b</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">function1</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    A a = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//a-b</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">function1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">function2</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.function1(i, j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Base a = <span class="keyword">new</span> A();</span><br><span class="line">        System.out.println(<span class="string">"1+2="</span>+a.function1(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">"2+3="</span>+a.function1(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        Base b = <span class="keyword">new</span> B();</span><br><span class="line">        System.out.println(<span class="string">"1-2="</span>+b.function1(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">"2-3="</span>+b.function1(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总之，里氏替换原则告诉我们，子类中尽量不要重写父类的方法！</p><p>代码地址：<a href="https://github.com/GilbertXiao/JavaDesignPatterns">https://github.com/GilbertXiao/JavaDesignPatterns</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;OO中的继承性的思考和说明&quot;&gt;&lt;a href=&quot;#OO中的继承性的思考和说明&quot; class=&quot;headerlink&quot; title=&quot;OO中的继承性的思考和说明&quot;&gt;&lt;/a&gt;OO中的继承性的思考和说明&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;继承包含这样一层含义： 父类中凡是已经实现好的方法，实际上是在设计规范，虽然它不强制要求所有子类必须遵循这些规范，但是如果子类如果对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.codesboy.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.codesboy.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>数组_66加一</title>
    <link href="https://www.codesboy.cn/2020/05/21/%E6%95%B0%E7%BB%84_66%E5%8A%A0%E4%B8%80/"/>
    <id>https://www.codesboy.cn/2020/05/21/%E6%95%B0%E7%BB%84_66%E5%8A%A0%E4%B8%80/</id>
    <published>2020-05-21T13:21:24.000Z</published>
    <updated>2020-06-05T18:06:12.087Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个由<strong>整数</strong>组成的<strong>非空</strong>数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储<strong>单个</strong>数字。</p><a id="more"></a><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p><p><strong>示例&nbsp;1:</strong></p><pre><strong>输入:</strong> [1,2,3]<strong>输出:</strong> [1,2,4]<strong>解释:</strong> 输入数组表示数字 123。</pre><p><strong>示例&nbsp;2:</strong></p><pre><strong>输入:</strong> [4,3,2,1]<strong>输出:</strong> [4,3,2,2]<strong>解释:</strong> 输入数组表示数字 4321。</pre><div><div>Related Topics</div><div><li>数组</li></div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digits.length; i++) &#123;</span><br><span class="line">        sb.append(digits[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    String s = sb.toString();</span><br><span class="line">    BigDecimal value = <span class="keyword">new</span> BigDecimal(s);</span><br><span class="line">    <span class="keyword">char</span>[] chars = String.valueOf(value.add(<span class="keyword">new</span> BigDecimal(<span class="number">1</span>))).toCharArray();</span><br><span class="line">    <span class="keyword">int</span>[] sum = <span class="keyword">new</span> <span class="keyword">int</span>[chars.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">        sum[i] = ( chars[i]-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是我原来三天前的思路。想转成整数然后相加，把计算交给程序，奈何随着输入的数组长度越来越长，总是会溢出，然后我看了思路，觉得自己太傻，就为了自己省事，唉，在做算法题啊。</p><p>以下是我看完思路后，三天后独立完成的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = digits.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (digits[i]+<span class="number">1</span>&lt;<span class="number">10</span>)&#123;</span><br><span class="line">                digits[i]=digits[i]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                digits[i]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (digits[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] ints = <span class="keyword">new</span> <span class="keyword">int</span>[digits.length + <span class="number">1</span>];</span><br><span class="line">            ints[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> ints;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个由&lt;strong&gt;整数&lt;/strong&gt;组成的&lt;strong&gt;非空&lt;/strong&gt;数组所表示的非负整数，在该数的基础上加一。&lt;/p&gt;

&lt;p&gt;最高位数字存放在数组的首位， 数组中每个元素只存储&lt;strong&gt;单个&lt;/strong&gt;数字。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>数组_53最大子序和</title>
    <link href="https://www.codesboy.cn/2020/05/20/%E6%95%B0%E7%BB%84_53%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/"/>
    <id>https://www.codesboy.cn/2020/05/20/%E6%95%B0%E7%BB%84_53%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</id>
    <published>2020-05-20T15:21:24.000Z</published>
    <updated>2020-06-05T18:06:09.175Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个整数数组 <code>nums</code>&nbsp;，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><a id="more"></a><p><strong>示例:</strong></p><pre><strong>输入:</strong> [-2,1,-3,4,-1,2,1,-5,4],<strong>输出:</strong> 6<strong>解释:</strong>&nbsp;连续子数组&nbsp;[4,-1,2,1] 的和最大，为&nbsp;6。</pre><p><strong>进阶:</strong></p><p>如果你已经实现复杂度为 O(<em>n</em>) 的解法，尝试使用更为精妙的分治法求解。</p><div><div>Related Topics</div><div><li>数组</li><li>分治算法</li><li>动态规划</li></div></div><p>这道题花了两个小时。各种考虑不周。其实三天前就看了答案的，知道有负收益这回事，但是真到了码代码就出错了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//记录目前出现的最大的和</span></span><br><span class="line">        <span class="keyword">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//连续求和</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">//一开始就赋值nums[0]，并循环从下标为1 的开始，导致漏了这种情况 [-1,2,3],无经验的表现。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            sum+=nums[i];</span><br><span class="line">            <span class="comment">//一旦sum小于等于0，就是无收益，放弃这个子数组，准备重新取值</span></span><br><span class="line">            <span class="keyword">if</span> (sum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//nums[i]还是正收益，取该值</span></span><br><span class="line">                    sum=nums[i];</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//nums[i]&lt;=0,从下个开始取</span></span><br><span class="line">                    sum=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                max = Math.max(nums[i], max);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                max = Math.max(sum, max);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/20200520231331.png" alt=""></p><p>看题解，思路更易懂些：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num: nums) &#123;</span><br><span class="line">            <span class="keyword">if</span>(sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                sum += num;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum = num;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个整数数组 &lt;code&gt;nums&lt;/code&gt;&amp;nbsp;，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>依赖倒转原则</title>
    <link href="https://www.codesboy.cn/2020/05/20/%E4%BE%9D%E8%B5%96%E5%80%92%E8%BD%AC%E5%8E%9F%E5%88%99/"/>
    <id>https://www.codesboy.cn/2020/05/20/%E4%BE%9D%E8%B5%96%E5%80%92%E8%BD%AC%E5%8E%9F%E5%88%99/</id>
    <published>2020-05-20T14:30:24.000Z</published>
    <updated>2020-06-05T18:06:35.170Z</updated>
    
    <content type="html"><![CDATA[<p>基本介绍</p><p>依赖倒转原则(Dependence Inversion Principle)是指：</p><ol><li>细节应该依赖抽象</li><li>依赖倒转(倒置)的本质是面向接口编程</li></ol><a id="more"></a><ol start="3"><li>依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。在Java中，抽象指的是接口或抽象类，细节就是具体的实现类</li><li>使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成</li></ol><h4 id="反例："><a href="#反例：" class="headerlink" title="反例："></a>反例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sms</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mobile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMsg</span><span class="params">(Sms sms)</span></span>&#123;</span><br><span class="line">        System.out.println(sms.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Mobile mobile = <span class="keyword">new</span> Mobile();</span><br><span class="line">        Sms sms = <span class="keyword">new</span> Sms();</span><br><span class="line">        mobile.receiveMsg(sms);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上Mobile类的receiveMsg方法参数是具体的对象Sms，如果以后还需要接收其他类型的数据，比如微信等，需要重新写方法，非常不利于扩展，改动大。</p><h4 id="正例："><a href="#正例：" class="headerlink" title="正例："></a>正例：</h4><p>改成面向接口对象即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMsg</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getMsg</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sms</span> <span class="keyword">implements</span> <span class="title">IMsg</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeChatMsg</span> <span class="keyword">implements</span> <span class="title">IMsg</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"WeChat is ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mobile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMsg</span><span class="params">(IMsg sms)</span></span>&#123;</span><br><span class="line">        System.out.println(sms.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Mobile mobile = <span class="keyword">new</span> Mobile();</span><br><span class="line">        IMsg sms = <span class="keyword">new</span> Sms();</span><br><span class="line">        mobile.receiveMsg(sms);</span><br><span class="line"></span><br><span class="line">        IMsg weChatMsg = <span class="keyword">new</span> WeChatMsg();</span><br><span class="line">        mobile.receiveMsg(weChatMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="依赖关系传递的三种方式和应用案例"><a href="#依赖关系传递的三种方式和应用案例" class="headerlink" title="依赖关系传递的三种方式和应用案例"></a>依赖关系传递的三种方式和应用案例</h4><ol><li>接口传递</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fly</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flyHigh</span><span class="params">(Run run)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickRun</span> <span class="keyword">implements</span> <span class="title">Run</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"飞奔。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DuckFly</span> <span class="keyword">implements</span> <span class="title">Fly</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flyHigh</span><span class="params">(Run run)</span> </span>&#123;</span><br><span class="line">        run.run();</span><br><span class="line">        System.out.println(<span class="string">"飞不高"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Run quickRun = <span class="keyword">new</span> QuickRun();</span><br><span class="line">        Fly duckFly = <span class="keyword">new</span> DuckFly();</span><br><span class="line">        duckFly.flyHigh(quickRun);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/20200520023039.png" alt=""></p><ol start="2"><li>构造方法传递</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fly</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flyHigh</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickRun</span> <span class="keyword">implements</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"飞奔。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DuckFly</span> <span class="keyword">implements</span> <span class="title">Fly</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Run run;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DuckFly</span><span class="params">(Run run)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.run = run;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flyHigh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        run.run();</span><br><span class="line">        System.out.println(<span class="string">"飞不高"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Run quickRun = <span class="keyword">new</span> QuickRun();</span><br><span class="line">        Fly duckFly = <span class="keyword">new</span> DuckFly(quickRun);</span><br><span class="line">        duckFly.flyHigh();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>setter 方法传递(较少使用)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fly</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flyHigh</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickRun</span> <span class="keyword">implements</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"飞奔。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DuckFly</span> <span class="keyword">implements</span> <span class="title">Fly</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Run run;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flyHigh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        run.run();</span><br><span class="line">        System.out.println(<span class="string">"飞不高"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Run <span class="title">getRun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> run;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRun</span><span class="params">(Run run)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.run = run;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Run quickRun = <span class="keyword">new</span> QuickRun();</span><br><span class="line">        DuckFly duckFly = <span class="keyword">new</span> DuckFly();</span><br><span class="line">        duckFly.setRun(quickRun);</span><br><span class="line">        duckFly.flyHigh();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="依赖倒转原则的注意事项和细节"><a href="#依赖倒转原则的注意事项和细节" class="headerlink" title="依赖倒转原则的注意事项和细节"></a>依赖倒转原则的注意事项和细节</h4><ol><li>低层模块最好有接口或者实现类，这样程序稳定性好</li><li>变量的声明尽量是抽象类或者方法，这样变量引用和实际对象间有了一个缓冲，利于程序的扩展和优化</li></ol><p>   比如我们方法参数常用List 而不是ArrayList，这样当我们需要LinkedList的时候，方法不需要改变什么就可以直接使用了。</p><ol start="3"><li>继承时要遵循里氏替换原则（下节内容）</li></ol><p>解释：每一个逻辑的实现都是由原子逻辑组成的，不可分割的原子逻辑就是低层模块，原子逻辑的再组装就是高层模块</p><p>代码地址：<a href="https://github.com/GilbertXiao/JavaDesignPatterns">https://github.com/GilbertXiao/JavaDesignPatterns</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基本介绍&lt;/p&gt;
&lt;p&gt;依赖倒转原则(Dependence Inversion Principle)是指：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;细节应该依赖抽象&lt;/li&gt;
&lt;li&gt;依赖倒转(倒置)的本质是面向接口编程&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.codesboy.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.codesboy.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>算法前言</title>
    <link href="https://www.codesboy.cn/2020/05/19/%E7%AE%97%E6%B3%95%E5%89%8D%E8%A8%80/"/>
    <id>https://www.codesboy.cn/2020/05/19/%E7%AE%97%E6%B3%95%E5%89%8D%E8%A8%80/</id>
    <published>2020-05-19T15:21:24.000Z</published>
    <updated>2020-06-11T14:56:53.999Z</updated>
    
    <content type="html"><![CDATA[<p>根据<a href="https://www.bilibili.com/video/BV13p4y1Q7aF?p=1&share_source=weixin_moments&share_medium=iphone&bbid=ZB49A4BD39F78EE94F6790563797E6017E47&ts=1589809255&from=timeline">up主小齐的经验</a>，她的第一阶段是根据<a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/">MIT的算法导论课</a>的课程顺序调整Leetcode的刷题顺序的，如下就是该课程的排课表：</p><a id="more"></a><p><img src="http://img.codesboy.cn/20200520000927.png" alt=""></p><p>截止到目前[20200519]，杰哥已经刷了13道题了（easy难度，题号从小到大的排序），还是比较弱鸡的。杰哥也会根据这个排课表重新调整刷题顺序的，需要继续努力啊，少年。</p><p><img src="http://img.codesboy.cn/20200520001909.png" alt=""></p><p>第一阶段刷题：</p><ol><li><p>数组：</p><ul><li><a href="\2020\05\20\数组_53最大子序和">Leetcode no.53 最大子序和</a></li><li><a href="\2020\05\21\数组_66加一">Leetcode no.66 加1</a></li></ul></li></ol><br/><hr/><br/><p>2020年06月01日加入了 <a href="https://github.com/leetcode-pp/91alg-1">91算法群</a>,和小伙伴一起刷算法题。以下是每天刷题记录:</p><br/><p>数组、栈、队列：</p><ul><li><a href="\2020\06\01\66_加一">2020-06-01 - 66. 加一</a></li><li><a href="\2020\06\02\75_颜色分类">2020-06-02 - 75. 颜色分类</a></li><li><a href="\2020\06\03\1381_设计一个支持增量操作的栈">2020-06-03 - 1381. 设计一个支持增量操作的栈</a></li><li><a href="\2020\06\04\394_字符串解码">2020-06-04 - 394. 字符串解码</a></li><li><a href="\2020\06\05\232_用栈实现队列">2020-06-05 - 232. 用栈实现队列</a></li><li><a href="\2020\06\06\380_常数时间插入、删除和获取随机元素">2020-06-06 - 380. 常数时间插入、删除和获取随机元素</a></li></ul><br/><p>链表：</p><ul><li><a href="\2020\06\07\206_反转链表">2020-06-07 - 206. 反转链表</a></li><li><a href="\2020\06\08\430_扁平化多级双向链表">2020-06-08 - 430. 扁平化多级双向链表 </a></li><li><a href="\2020\06\09\109_有序链表转换二叉搜索树">2020-06-09 - 109. 有序链表转换二叉搜索树</a> </li><li><a href="\2020\06\10\160_相交链表">2020-06-10 - 160. 相交链表</a> </li><li><a href="\2020\06\11\142_环形链表II">2020-06-11 - 142. 环形链表 II</a> </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据&lt;a href=&quot;https://www.bilibili.com/video/BV13p4y1Q7aF?p=1&amp;share_source=weixin_moments&amp;share_medium=iphone&amp;bbid=ZB49A4BD39F78EE94F6790563797E6017E47&amp;ts=1589809255&amp;from=timeline&quot;&gt;up主小齐的经验&lt;/a&gt;，她的第一阶段是根据&lt;a href=&quot;https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/&quot;&gt;MIT的算法导论课&lt;/a&gt;的课程顺序调整Leetcode的刷题顺序的，如下就是该课程的排课表：&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
