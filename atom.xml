<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飞码录</title>
  
  <subtitle>飞码录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.codesboy.cn/"/>
  <updated>2020-07-28T15:37:00.338Z</updated>
  <id>https://www.codesboy.cn/</id>
  
  <author>
    <name>飞码录</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>295. 数据流的中位数</title>
    <link href="https://www.codesboy.cn/2020/07/28/295_%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <id>https://www.codesboy.cn/2020/07/28/295_%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</id>
    <published>2020-07-28T13:21:24.000Z</published>
    <updated>2020-07-28T15:37:00.338Z</updated>
    
    <content type="html"><![CDATA[<p>中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。</p><a id="more"></a><p>例如，</p><p>[2,3,4]&nbsp;的中位数是 3</p><p>[2,3] 的中位数是 (2 + 3) / 2 = 2.5</p><p>设计一个支持以下两种操作的数据结构：</p><ul>    <li>void addNum(int num) - 从数据流中添加一个整数到数据结构中。</li>    <li>double findMedian() - 返回目前所有元素的中位数。</li></ul><p><strong>示例：</strong></p><pre>addNum(1)addNum(2)findMedian() -&gt; 1.5addNum(3) findMedian() -&gt; 2</pre><p><strong>进阶:</strong></p><ol>    <li>如果数据流中所有整数都在 0 到 100 范围内，你将如何优化你的算法？</li>    <li>如果数据流中 99% 的整数都在 0 到 100 范围内，你将如何优化你的算法？</li></ol><div><div>Related Topics</div><div><li>堆</li><li>设计</li></div></div><br/><p>看题解的…<br>时间复杂度O(logN)<br>空间复杂度O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MedianFinder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size ;</span><br><span class="line">    <span class="keyword">private</span> PriorityQueue&lt;Integer&gt; maxHeap;</span><br><span class="line">    <span class="keyword">private</span> PriorityQueue&lt;Integer&gt; minHeap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MedianFinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        minHeap = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">        <span class="comment">//size of maxHeap should larger than minQueue 1 or equal</span></span><br><span class="line">        maxHeap = <span class="keyword">new</span> PriorityQueue&lt;&gt;(Comparator.reverseOrder());</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        size++;</span><br><span class="line">        maxHeap.offer(num);</span><br><span class="line">        minHeap.offer(maxHeap.poll());</span><br><span class="line">        <span class="keyword">if</span> ((size &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            maxHeap.offer(minHeap.poll());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>D;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((size &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">double</span>) (maxHeap.peek() + minHeap.peek()) / <span class="number">2.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)  maxHeap.peek();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200728233030.png" alt=""></p><hr><p><a href="https://github.com/leetcode-pp/91alg-1/issues/78#issuecomment-661763346">91算法打卡第六十天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>47. 全排列II</title>
    <link href="https://www.codesboy.cn/2020/07/21/47_%E5%85%A8%E6%8E%92%E5%88%97II/"/>
    <id>https://www.codesboy.cn/2020/07/21/47_%E5%85%A8%E6%8E%92%E5%88%97II/</id>
    <published>2020-07-21T13:21:24.000Z</published>
    <updated>2020-07-22T15:40:22.198Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个可包含重复数字的序列，返回所有不重复的全排列。</p><a id="more"></a><p><strong>示例:</strong></p><pre><strong>输入:</strong> [1,1,2]<strong>输出:</strong>[  [1,1,2],  [1,2,1],  [2,1,1]]</pre><div><div>Related Topics</div><div><li>回溯算法</li></div></div><br/><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; allList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Deque elementDeque = <span class="keyword">new</span> ArrayDeque&lt;Integer&gt;();</span><br><span class="line">    <span class="comment">// 0 disvisited; 1 visited</span></span><br><span class="line">    <span class="keyword">int</span>[] visited = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    dfs(nums, allList, elementDeque, visited, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> allList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] nums, List&lt;List&lt;Integer&gt;&gt; allList, Deque&lt;Integer&gt; elementDeque, <span class="keyword">int</span>[] visited, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (elementDeque.size() == nums.length) &#123;</span><br><span class="line">        allList.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(elementDeque));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (visited[i] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; visited[i - <span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        elementDeque.push(nums[i]);</span><br><span class="line">        <span class="comment">//set visited</span></span><br><span class="line">        visited[i] = <span class="number">1</span>;</span><br><span class="line">        dfs(nums, allList, elementDeque, visited, i);</span><br><span class="line">        visited[i] = <span class="number">0</span>;</span><br><span class="line">        elementDeque.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200722083814.png" alt=""></p><hr><p><a href="https://github.com/leetcode-pp/91alg-1/issues/78#issuecomment-661763346">91算法打卡第五十一天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个可包含重复数字的序列，返回所有不重复的全排列。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>40. 组合总和II</title>
    <link href="https://www.codesboy.cn/2020/07/20/40_%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII/"/>
    <id>https://www.codesboy.cn/2020/07/20/40_%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII/</id>
    <published>2020-07-20T13:21:24.000Z</published>
    <updated>2020-07-21T17:50:15.268Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个数组&nbsp;<code>candidates</code>&nbsp;和一个目标数&nbsp;<code>target</code>&nbsp;，找出&nbsp;<code>candidates</code>&nbsp;中所有可以使数字和为&nbsp;<code>target</code>&nbsp;的组合。</p><a id="more"></a><p><code>candidates</code>&nbsp;中的每个数字在每个组合中只能使用一次。</p><p><strong>说明：</strong></p><ul>    <li>所有数字（包括目标数）都是正整数。</li>    <li>解集不能包含重复的组合。&nbsp;</li></ul><p><strong>示例&nbsp;1:</strong></p><pre><strong>输入:</strong> candidates =&nbsp;<code>[10,1,2,7,6,1,5]</code>, target =&nbsp;<code>8</code>,<strong>所求解集为:</strong>[  [1, 7],  [1, 2, 5],  [2, 6],  [1, 1, 6]]</pre><p><strong>示例&nbsp;2:</strong></p><pre><strong>输入:</strong> candidates =&nbsp;[2,5,2,1,2], target =&nbsp;5,<strong>所求解集为:</strong>[&nbsp; [1,2,2],&nbsp; [5]]</pre><div><div>Related Topics</div><div><li>数组</li><li>回溯算法</li></div></div><br/><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; allList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Deque&lt;Integer&gt; elementDeque = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    Arrays.sort(candidates);</span><br><span class="line">    dfs(candidates, target, allList, elementDeque, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> allList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target, List&lt;List&lt;Integer&gt;&gt; list, Deque&lt;Integer&gt; deque, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(deque));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; candidates.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (target &lt; candidates[i]) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; index &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        deque.push(candidates[i]);</span><br><span class="line">        dfs(candidates, target - candidates[i], list, deque, i + <span class="number">1</span>);</span><br><span class="line">        deque.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200722014036.png" alt=""></p><hr><p><a href="https://github.com/leetcode-pp/91alg-1/issues/77#issuecomment-660946578">91算法打卡第五十天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个数组&amp;nbsp;&lt;code&gt;candidates&lt;/code&gt;&amp;nbsp;和一个目标数&amp;nbsp;&lt;code&gt;target&lt;/code&gt;&amp;nbsp;，找出&amp;nbsp;&lt;code&gt;candidates&lt;/code&gt;&amp;nbsp;中所有可以使数字和为&amp;nbsp;&lt;code&gt;target&lt;/code&gt;&amp;nbsp;的组合。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>39. 组合总和</title>
    <link href="https://www.codesboy.cn/2020/07/19/39_%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/"/>
    <id>https://www.codesboy.cn/2020/07/19/39_%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</id>
    <published>2020-07-19T13:21:24.000Z</published>
    <updated>2020-07-21T17:49:10.934Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个<strong>无重复元素</strong>的数组&nbsp;<code>candidates</code>&nbsp;和一个目标数&nbsp;<code>target</code>&nbsp;，找出&nbsp;<code>candidates</code>&nbsp;中所有可以使数字和为&nbsp;<code>target</code>&nbsp;的组合。</p><a id="more"></a><p><code>candidates</code>&nbsp;中的数字可以无限制重复被选取。</p><p><strong>说明：</strong></p><ul>    <li>所有数字（包括&nbsp;<code>target</code>）都是正整数。</li>    <li>解集不能包含重复的组合。&nbsp;</li></ul><p><strong>示例&nbsp;1：</strong></p><pre><strong>输入：</strong>candidates = <code>[2,3,6,7], </code>target = <code>7</code>,<strong>所求解集为：</strong>[  [7],  [2,2,3]]</pre><p><strong>示例&nbsp;2：</strong></p><pre><strong>输入：</strong>candidates = [2,3,5]<code>, </code>target = 8,<strong>所求解集为：</strong>[&nbsp; [2,2,2,2],&nbsp; [2,3,3],&nbsp; [3,5]]</pre><p>&nbsp;</p><p><strong>提示：</strong></p><ul>    <li><code>1 &lt;= candidates.length &lt;= 30</code></li>    <li><code>1 &lt;= candidates[i] &lt;= 200</code></li>    <li><code>candidate</code> 中的每个元素都是独一无二的。</li>    <li><code>1 &lt;= target &lt;= 500</code></li></ul><div><div>Related Topics</div><div><li>数组</li><li>回溯算法</li></div></div><br/><p>看群友思路的哈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; allList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        Deque&lt;Integer&gt; storeElementDeque = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        subCombinationSum(candidates, target,allList,storeElementDeque,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> allList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> candidates 输入参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 目标值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> allList 用于存储所有符合条件的list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> storeElementDeque 用于存储遍历的element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 从candidates中的index位置开始取数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">subCombinationSum</span><span class="params">(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target, List&lt;List&lt;Integer&gt;&gt; allList, Deque&lt;Integer&gt; storeElementDeque, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            allList.add(<span class="keyword">new</span> ArrayList&lt;&gt;(storeElementDeque));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; candidates.length; i++) &#123;</span><br><span class="line">            storeElementDeque.push(candidates[i]);</span><br><span class="line">            subCombinationSum(candidates, target - candidates[i], allList, storeElementDeque, i);</span><br><span class="line">            storeElementDeque.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/leetcode-pp/91alg-1/issues/76#issuecomment-660649940" alt=""></p><hr><p><a href="https://github.com/leetcode-pp/91alg-1/issues/75#issuecomment-660483924">91算法打卡第四十九天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个&lt;strong&gt;无重复元素&lt;/strong&gt;的数组&amp;nbsp;&lt;code&gt;candidates&lt;/code&gt;&amp;nbsp;和一个目标数&amp;nbsp;&lt;code&gt;target&lt;/code&gt;&amp;nbsp;，找出&amp;nbsp;&lt;code&gt;candidates&lt;/code&gt;&amp;nbsp;中所有可以使数字和为&amp;nbsp;&lt;code&gt;target&lt;/code&gt;&amp;nbsp;的组合。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>建造者模式</title>
    <link href="https://www.codesboy.cn/2020/07/19/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.codesboy.cn/2020/07/19/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-07-19T10:18:24.000Z</published>
    <updated>2020-07-25T12:57:14.185Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h3><p>盖房项目需求：</p><ol><li>需要建房子：这个过程为打桩、砌墙、封顶</li></ol><a id="more"></a><ol start="2"><li>房子有各种各样的，比如普通房、高楼、别墅。各种房子的过程虽然一样，但是要求不相同。 </li></ol><h3 id="传统方式解决盖房问题"><a href="#传统方式解决盖房问题" class="headerlink" title="传统方式解决盖房问题"></a>传统方式解决盖房问题</h3><ol><li>思路分析（图解）</li></ol><p><img src="http://img.codesboy.cn/2020/07/20200719212716.png" alt=""></p><ol start="2"><li>代码演示</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHouse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地基</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//砌墙</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//封顶</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        buildBasic();</span><br><span class="line">        buildWalls();</span><br><span class="line">        roofed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonHouse</span> <span class="keyword">extends</span> <span class="title">AbstractHouse</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"普通房子打地基"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"普通房子砌墙"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"普通房子封顶"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighBuilding</span> <span class="keyword">extends</span> <span class="title">AbstractHouse</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"高楼打地基"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"高楼砌墙"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"高楼封顶"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CommonHouse commonHouse = <span class="keyword">new</span> CommonHouse();</span><br><span class="line">        commonHouse.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传统方式的优缺点"><a href="#传统方式的优缺点" class="headerlink" title="传统方式的优缺点"></a>传统方式的优缺点</h3><ol><li>优点是比较好理解，简单易操作。</li><li>设计的程序结构过于简单，没有设计缓冲层对象，程序的扩展和维护不好，也就是，这种设计方案，把产品（即房子） 和 创建产品的过程（即：建房子流程）封装在一起，耦合性增强了。</li><li>解决方案：将产品和产品建造过程解耦，即建造者模式</li></ol><h3 id="建造者模式的基本介绍"><a href="#建造者模式的基本介绍" class="headerlink" title="建造者模式的基本介绍"></a>建造者模式的基本介绍</h3><ol><li>建造者模式（Builder Pattern） 又叫生成器模式，是一种对象构建模式。GOF给建造者模式的定位为： 将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同表示。即将复杂对象的构建过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以创建出不同表现（属性）的对象。</li><li>建造者模式是一步步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。</li></ol><h3 id="建造者模式的组成"><a href="#建造者模式的组成" class="headerlink" title="建造者模式的组成"></a>建造者模式的组成</h3><p><img src="http://img.codesboy.cn/2020/07/20200719233854.png" alt=""></p><p>结构图说明：</p><ul><li>Product: 产品角色，一个具体的产品对象。</li><li>Builder: 抽象建造者角色，用来规范产品对象的各个组成部分的建造。</li><li>ConcreteBuilder: 具体建造者角色。具体实现各个组成部分的建造。</li><li>Director: 指挥者角色。构建一个使用Builder接口的对象，用以创建产品对象。指挥者的作用有两点：1. 隔离客户与产品对象的生产过程；2.负责控制产品对象的生产过程，但不知道具体细节。</li></ul><h3 id="代码思路分析-类图"><a href="#代码思路分析-类图" class="headerlink" title="代码思路分析(类图)"></a>代码思路分析(类图)</h3><p><img src="http://img.codesboy.cn/2020/07/20200720001821.png" alt=""></p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">House</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String basis;</span><br><span class="line">    <span class="keyword">private</span> String wall;</span><br><span class="line">    <span class="keyword">private</span> String roofed;</span><br><span class="line">    <span class="comment">//省略 get set 方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HouserBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> House house = <span class="keyword">new</span> House();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地基</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//砌墙</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//封顶</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> house;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonHouseBuilder</span> <span class="keyword">extends</span> <span class="title">HouserBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        house.setBasis(<span class="string">"20m"</span>);</span><br><span class="line">        System.out.println(<span class="string">"普通房子打地基20m"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        house.setWall(<span class="string">"10m"</span>);</span><br><span class="line">        System.out.println(<span class="string">"普通房子砌墙10m"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        house.setRoofed(<span class="string">"普通屋顶"</span>);</span><br><span class="line">        System.out.println(<span class="string">"普通房子封顶"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighBuildingBuilder</span> <span class="keyword">extends</span> <span class="title">HouserBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        house.setBasis(<span class="string">"50m"</span>);</span><br><span class="line">        System.out.println(<span class="string">"高楼打地基50m"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildWalls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        house.setWall(<span class="string">"100m"</span>);</span><br><span class="line">        System.out.println(<span class="string">"高楼砌墙100m"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        house.setRoofed(<span class="string">"透明顶"</span>);</span><br><span class="line">        System.out.println(<span class="string">"高楼封透明顶"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseDirector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HouserBuilder houserBuilder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HouseDirector</span><span class="params">(HouserBuilder houserBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.houserBuilder = houserBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HouserBuilder <span class="title">getHouserBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> houserBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHouserBuilder</span><span class="params">(HouserBuilder houserBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.houserBuilder = houserBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">constructHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        houserBuilder.buildBasic();</span><br><span class="line">        houserBuilder.buildWalls();</span><br><span class="line">        houserBuilder.roofed();</span><br><span class="line">        <span class="keyword">return</span> houserBuilder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        CommonHouseBuilder commonHouseBuilder = <span class="keyword">new</span> CommonHouseBuilder();</span><br><span class="line">        HouseDirector houseDirector = <span class="keyword">new</span> HouseDirector(commonHouseBuilder);</span><br><span class="line">        House house = houseDirector.constructHouse();</span><br><span class="line"></span><br><span class="line">        houseDirector.setHouserBuilder(<span class="keyword">new</span> HighBuildingBuilder());</span><br><span class="line">        House house1 = houseDirector.constructHouse();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200720003259.png" alt=""></p><h3 id="建造者模式在JDK的应用与源码分析"><a href="#建造者模式在JDK的应用与源码分析" class="headerlink" title="建造者模式在JDK的应用与源码分析"></a>建造者模式在JDK的应用与源码分析</h3><p>java.lang.StringBuilder 中的建造者模式</p><p><img src="http://img.codesboy.cn/2020/07/20200720010538.png" alt=""></p><p>源码分析</p><ul><li>java.lang.Appendable 接口定义了多个append 方法（抽象方法），即java.lang.Appendable 为 Builder（抽象建造者）</li><li>java.lang.AbstractStringBuilder 实现了Appendable 的接口方法，这里的AbstractStringBuilder已经是建造者了，只是不能实例化、</li><li>java.lang.StringBuilder 既是指挥者，又是建造者。建造者方法的实现是由AbstractStringBuilder实现，而StringBuilder继承了AbstractStringBuilder，并可以实例化。</li></ul><h3 id="《Effective-Java》中推荐建造者模式的场景"><a href="#《Effective-Java》中推荐建造者模式的场景" class="headerlink" title="《Effective Java》中推荐建造者模式的场景"></a>《Effective Java》中推荐建造者模式的场景</h3><ol><li>建造者模式既能保证像重叠构造器模式那样的安全性，也能保证像JavaBeans模式那么好的可读性。</li><li>当参数很多的时候，比如4个或者更多个参数，这时候就可以考虑使用建造者模式，而非重叠构造器模式。</li></ol><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象建造者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Topping &#123;HAM,MUSHROOM,ONION,PEPPER,SAUAGE&#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">final</span> Set&lt;Topping&gt; toppings;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归类型参数，详见《Effective Java》</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Builder</span>&lt;<span class="title">T</span>&gt;&gt;</span>&#123;</span><br><span class="line">        EnumSet&lt;Topping&gt; toppings = EnumSet.noneOf(Topping<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">addTopping</span><span class="params">(Topping topping)</span> </span>&#123;</span><br><span class="line">            toppings.add(Objects.requireNonNull(topping));</span><br><span class="line">            <span class="keyword">return</span> self();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> Pizza <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//subclasses must override this method to return "this"</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">self</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Pizza(Builder&lt;?&gt; builder) &#123;</span><br><span class="line">        toppings = builder.toppings.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体建造者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NyPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Size &#123;SMALL,MEDIUM, LARGE&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Size size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">extends</span> <span class="title">Pizza</span>.<span class="title">Builder</span>&lt;<span class="title">Builder</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Size size;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Size size)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.size = Objects.requireNonNull(size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NyPizza <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NyPizza(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Builder <span class="title">self</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NyPizza</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(builder);</span><br><span class="line">        <span class="keyword">this</span>.size = builder.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"NyPizza&#123;"</span> +</span><br><span class="line">                <span class="string">"size="</span> + size +</span><br><span class="line">                <span class="string">", toppings="</span> + toppings +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体建造者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calzone</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> sauceInside;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">extends</span> <span class="title">Pizza</span>.<span class="title">Builder</span>&lt;<span class="title">Builder</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> sauceInside = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sauceInside</span><span class="params">()</span></span>&#123;</span><br><span class="line">            sauceInside=<span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Calzone <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Calzone(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">self</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Calzone(Builder builder) &#123;</span><br><span class="line">        <span class="keyword">super</span>(builder);</span><br><span class="line">        <span class="keyword">this</span>.sauceInside = builder.sauceInside;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Calzone&#123;"</span> +</span><br><span class="line">                <span class="string">"sauceInside="</span> + sauceInside +</span><br><span class="line">                <span class="string">", toppings="</span> + toppings +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//client</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NyPizza nyPizza = <span class="keyword">new</span> NyPizza.Builder(SMALL).addTopping(SAUAGE).addTopping(ONION).build();</span><br><span class="line">        Calzone calzone = <span class="keyword">new</span> Calzone.Builder().addTopping(MUSHROOM).addTopping(ONION).sauceInside().build();</span><br><span class="line">        System.out.println(nyPizza);</span><br><span class="line">        System.out.println(calzone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200720231007.png" alt=""></p><h3 id="建造者模式的注意事项和细节"><a href="#建造者模式的注意事项和细节" class="headerlink" title="建造者模式的注意事项和细节"></a>建造者模式的注意事项和细节</h3><ol><li>客户端（使用程序）不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象</li><li>增加新的具体建造者无需修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展更方便，符合开闭原则。</li><li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品间的差异很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</li><li>如果产品的内部变化复杂， 可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。因此在这种情况下，要考虑是否选择建造者模式。</li><li>抽象工厂模式VS建造者模式：<br>建造者模式着重于逐步将组件装配成一个成品并向外提供成品，而抽象工厂模式着重于得到产品族中相关的多个产品对象；抽象工厂模式的应用受限于产品族，而建造者模式不会。</li></ol><br/><p>参考资源: </p><ul><li>韩顺平 《图解Java设计模式》</li><li>《Effective Java》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引文&quot;&gt;&lt;a href=&quot;#引文&quot; class=&quot;headerlink&quot; title=&quot;引文&quot;&gt;&lt;/a&gt;引文&lt;/h3&gt;&lt;p&gt;盖房项目需求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要建房子：这个过程为打桩、砌墙、封顶&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.codesboy.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.codesboy.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>814. 二叉树剪枝</title>
    <link href="https://www.codesboy.cn/2020/07/18/814_%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%AA%E6%9E%9D/"/>
    <id>https://www.codesboy.cn/2020/07/18/814_%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%AA%E6%9E%9D/</id>
    <published>2020-07-18T13:21:24.000Z</published>
    <updated>2020-07-21T16:18:35.460Z</updated>
    
    <content type="html"><![CDATA[<p>给定二叉树根结点&nbsp;<code>root</code>&nbsp;，此外树的每个结点的值要么是 0，要么是 1。</p><a id="more"></a><p>返回移除了所有不包含 1 的子树的原二叉树。</p><p>( 节点 X 的子树为 X 本身，以及所有 X 的后代。)</p><pre><strong>示例1:</strong><strong>输入:</strong> [1,null,0,0,1]<strong>输出: </strong>[1,null,0,null,1]<strong>解释:</strong> 只有红色节点满足条件&ldquo;所有不包含 1 的子树&rdquo;。右图为返回的答案。<img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_2.png" style="width:450px" /></pre><pre><strong>示例2:</strong><strong>输入:</strong> [1,0,1,0,0,0,1]<strong>输出: </strong>[1,null,1,null,1]<img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_1.png" style="width:450px" /></pre><pre><strong>示例3:</strong><strong>输入:</strong> [1,1,0,1,1,0,1,0]<strong>输出: </strong>[1,1,0,1,1,null,1]<img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/05/1028.png" style="width:450px" /></pre><p><strong>说明: </strong></p><ul>    <li>给定的二叉树最多有&nbsp;<code>100</code>&nbsp;个节点。</li>    <li>每个节点的值只会为&nbsp;<code>0</code> 或&nbsp;<code>1</code>&nbsp;。</li></ul><div><div>Related Topics</div><div><li>树</li></div></div><br/><p>时间复杂度 O(n) ,n表示n个节点<br>空间复杂度O(h),h表示树的高度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">pruneTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root.left = pruneTree(root.left);</span><br><span class="line">        root.right = pruneTree(root.right);</span><br><span class="line">        <span class="keyword">if</span> (root.val == <span class="number">0</span> &amp;&amp; root.left == <span class="keyword">null</span>  &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200721203424.png" alt=""></p><hr><p><a href="https://github.com/leetcode-pp/91alg-1/issues/75#issuecomment-660483924">91算法打卡第四十八天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定二叉树根结点&amp;nbsp;&lt;code&gt;root&lt;/code&gt;&amp;nbsp;，此外树的每个结点的值要么是 0，要么是 1。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>1319. 连通网络的操作次数</title>
    <link href="https://www.codesboy.cn/2020/07/16/1319_%E8%BF%9E%E9%80%9A%E7%BD%91%E7%BB%9C%E7%9A%84%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0/"/>
    <id>https://www.codesboy.cn/2020/07/16/1319_%E8%BF%9E%E9%80%9A%E7%BD%91%E7%BB%9C%E7%9A%84%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0/</id>
    <published>2020-07-16T13:21:24.000Z</published>
    <updated>2020-07-16T17:38:45.693Z</updated>
    
    <content type="html"><![CDATA[<p>用以太网线缆将&nbsp;<code>n</code>&nbsp;台计算机连接成一个网络，计算机的编号从&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n-1</code>。线缆用&nbsp;<code>connections</code>&nbsp;表示，其中&nbsp;<code>connections[i] = [a, b]</code>&nbsp;连接了计算机&nbsp;<code>a</code>&nbsp;和&nbsp;<code>b</code>。</p><a id="more"></a><p>网络中的任何一台计算机都可以通过网络直接或者间接访问同一个网络中其他任意一台计算机。</p><p>给你这个计算机网络的初始布线&nbsp;<code>connections</code>，你可以拔开任意两台直连计算机之间的线缆，并用它连接一对未直连的计算机。请你计算并返回使所有计算机都连通所需的最少操作次数。如果不可能，则返回&nbsp;-1 。&nbsp;</p><p>&nbsp;</p><p><strong>示例 1：</strong></p><p><strong><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/11/sample_1_1677.png" style="height: 167px; width: 570px;"></strong></p><pre><strong>输入：</strong>n = 4, connections = [[0,1],[0,2],[1,2]]<strong>输出：</strong>1<strong>解释：</strong>拔下计算机 1 和 2 之间的线缆，并将它插到计算机 1 和 3 上。</pre><p><strong>示例 2：</strong></p><p><strong><img alt="" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/11/sample_2_1677.png" style="height: 175px; width: 660px;"></strong></p><pre><strong>输入：</strong>n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]<strong>输出：</strong>2</pre><p><strong>示例 3：</strong></p><pre><strong>输入：</strong>n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]<strong>输出：</strong>-1<strong>解释：</strong>线缆数量不足。</pre><p><strong>示例 4：</strong></p><pre><strong>输入：</strong>n = 5, connections = [[0,1],[0,2],[3,4],[2,3]]<strong>输出：</strong>0</pre><p>&nbsp;</p><p><strong>提示：</strong></p><ul>    <li><code>1 &lt;= n &lt;= 10^5</code></li>    <li><code>1 &lt;= connections.length &lt;= min(n*(n-1)/2, 10^5)</code></li>    <li><code>connections[i].length == 2</code></li>    <li><code>0 &lt;= connections[i][0], connections[i][1]&nbsp;&lt; n</code></li>    <li><code>connections[i][0] != connections[i][1]</code></li>    <li>没有重复的连接。</li>    <li>两台计算机不会通过多条线缆连接。</li></ul><div><div>Related Topics</div><div><li>深度优先搜索</li><li>广度优先搜索</li><li>并查集</li></div></div><br/><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">makeConnected</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[][] connections)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> allConnections = connections.length;</span><br><span class="line">        <span class="keyword">if</span> (allConnections &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        UnionFindSet unionFindSet = <span class="keyword">new</span> UnionFindSet(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; connections.length; i++) &#123;</span><br><span class="line">            unionFindSet.unionSet(connections[i][<span class="number">0</span>], connections[i][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> unionFindSet.getSumOfSet()-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFindSet</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] rank;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sumOfSet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnionFindSet</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line">        <span class="keyword">this</span>.rank = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line">        <span class="keyword">this</span>.sumOfSet = num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parent.length; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findSet</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x != parent[x]) &#123;</span><br><span class="line">            parent[x] = findSet(parent[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unionSet</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rootX = findSet(x);</span><br><span class="line">        <span class="keyword">int</span> rootY = findSet(y);</span><br><span class="line">        <span class="keyword">if</span> (rootX == rootY) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rank[rootX] &gt; rank[rootY]) &#123;</span><br><span class="line">            parent[rootY] = rootX;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            parent[rootX] = rootY;</span><br><span class="line">            <span class="keyword">if</span> (rank[rootX] == rank[rootY]) &#123;</span><br><span class="line">                rank[rootY]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sumOfSet--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSumOfSet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sumOfSet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200717013211.png" alt=""></p><hr><p><a href="https://github.com/leetcode-pp/91alg-1/issues/73#issuecomment-658840079">91算法打卡第四十六天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用以太网线缆将&amp;nbsp;&lt;code&gt;n&lt;/code&gt;&amp;nbsp;台计算机连接成一个网络，计算机的编号从&amp;nbsp;&lt;code&gt;0&lt;/code&gt;&amp;nbsp;到&amp;nbsp;&lt;code&gt;n-1&lt;/code&gt;。线缆用&amp;nbsp;&lt;code&gt;connections&lt;/code&gt;&amp;nbsp;表示，其中&amp;nbsp;&lt;code&gt;connections[i] = [a, b]&lt;/code&gt;&amp;nbsp;连接了计算机&amp;nbsp;&lt;code&gt;a&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code&gt;b&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>924. 尽量减少恶意软件的传播</title>
    <link href="https://www.codesboy.cn/2020/07/15/924_%E5%B0%BD%E9%87%8F%E5%87%8F%E5%B0%91%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E7%9A%84%E4%BC%A0%E6%92%AD/"/>
    <id>https://www.codesboy.cn/2020/07/15/924_%E5%B0%BD%E9%87%8F%E5%87%8F%E5%B0%91%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E7%9A%84%E4%BC%A0%E6%92%AD/</id>
    <published>2020-07-15T13:21:24.000Z</published>
    <updated>2020-07-16T16:49:56.328Z</updated>
    
    <content type="html"><![CDATA[<p>在节点网络中，只有当 <code>graph[i][j] = 1</code>&nbsp;时，每个节点&nbsp;<code>i</code>&nbsp;能够直接连接到另一个节点 <code>j</code>。</p><a id="more"></a><p>一些节点&nbsp;<code>initial</code>&nbsp;最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。</p><p>假设 <code>M(initial)</code> 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。</p><p>我们可以从初始列表中删除一个节点。如果移除这一节点将最小化 <code>M(initial)</code>，&nbsp;则返回该节点。如果有多个节点满足条件，就返回索引最小的节点。</p><p>请注意，如果某个节点已从受感染节点的列表 <code>initial</code> 中删除，它以后可能仍然因恶意软件传播而受到感染。</p><p>&nbsp;</p><ol></ol><p><strong>示例 1：</strong></p><pre><strong>输入：</strong>graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]<strong>输出：</strong>0</pre><p><strong>示例 2：</strong></p><pre><strong>输入：</strong>graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]<strong>输出：</strong>0</pre><p><strong>示例 3：</strong></p><pre><strong>输入：</strong>graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]<strong>输出：</strong>1</pre><p>&nbsp;</p><p><strong>提示：</strong></p><ul>    <li><code>1 &lt; graph.length = graph[0].length &lt;= 300</code></li>    <li><code>0 &lt;= graph[i][j] == graph[j][i] &lt;= 1</code></li>    <li><code>graph[i][i] == 1</code></li>    <li><code>1 &lt;= initial.length &lt; graph.length</code></li>    <li><code>0 &lt;= initial[i] &lt; graph.length</code></li></ul><div><div>Related Topics</div><div><li>深度优先搜索</li><li>并查集</li></div></div><br/><p>借鉴群友思路写出来的~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minMalwareSpread</span><span class="params">(<span class="keyword">int</span>[][] graph, <span class="keyword">int</span>[] initial)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (graph == <span class="keyword">null</span> || initial == <span class="keyword">null</span> || graph.length == <span class="number">0</span> || initial.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        UnionFindSet unionFindSet = <span class="keyword">new</span> UnionFindSet(graph.length);</span><br><span class="line">        Map&lt;Integer, Integer&gt; rootSizeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; graph.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (graph[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    unionFindSet.unionSet(i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; initial.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> root = unionFindSet.findSet(initial[i]);</span><br><span class="line">            rootSizeMap.put(root, rootSizeMap.getOrDefault(root, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = initial[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> malwareSpread = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; initial.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> root = unionFindSet.findSet(initial[i]);</span><br><span class="line">            <span class="keyword">if</span> (rootSizeMap.get(root) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (malwareSpread == Integer.MIN_VALUE) &#123;</span><br><span class="line">                    <span class="comment">//the initial array exist more than one element in the same set Of UnionFindSet, and now have not find the single element in the independent set of UnionFindSet. compare the index of element , and update</span></span><br><span class="line">                    result = Math.min(result, initial[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (unionFindSet.getSizeOfSet(root) &gt; malwareSpread) &#123;</span><br><span class="line">                <span class="comment">//find the larger set ,update the index</span></span><br><span class="line">                malwareSpread = unionFindSet.getSizeOfSet(root);</span><br><span class="line">                result = initial[i];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (unionFindSet.getSizeOfSet(root) == malwareSpread) &#123;</span><br><span class="line">                <span class="comment">//the size of set now equal , compare the index and get the smaller</span></span><br><span class="line">                result = Math.min(result, initial[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        <span class="keyword">int</span>[][] graph = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] initial = &#123;<span class="number">7</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> i = solution.minMalwareSpread(graph, initial);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFindSet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] parents;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] ranks;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sumOfSet;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] sizeOfSet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnionFindSet</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parents = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line">        <span class="keyword">this</span>.ranks = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line">        <span class="keyword">this</span>.sumOfSet = num;</span><br><span class="line">        <span class="keyword">this</span>.sizeOfSet = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parents.length; i++) &#123;</span><br><span class="line">            parents[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sizeOfSet.length; i++) &#123;</span><br><span class="line">            sizeOfSet[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ranks.length; i++) &#123;</span><br><span class="line">            ranks[i] = i;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findSet</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x != parents[x]) &#123;</span><br><span class="line">            parents[x] = findSet(parents[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parents[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unionSet</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rootX = findSet(x);</span><br><span class="line">        <span class="keyword">int</span> rootY = findSet(y);</span><br><span class="line">        <span class="keyword">if</span> (rootX == rootY) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ranks[rootX] &gt; ranks[rootY]) &#123;</span><br><span class="line">            parents[rootY] = rootX;</span><br><span class="line">            sizeOfSet[rootX] += sizeOfSet[rootY];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parents[rootX] = rootY;</span><br><span class="line">            sizeOfSet[rootY] += sizeOfSet[rootX];</span><br><span class="line">            <span class="keyword">if</span> (ranks[rootX] == ranks[rootY]) &#123;</span><br><span class="line">                ranks[rootY]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sumOfSet--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSumOfSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sumOfSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSizeOfSet</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sizeOfSet[x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200717002749.png" alt=""></p><hr><p><a href="https://github.com/leetcode-pp/91alg-1/issues/72#issuecomment-659195428">91算法打卡第四十五天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在节点网络中，只有当 &lt;code&gt;graph[i][j] = 1&lt;/code&gt;&amp;nbsp;时，每个节点&amp;nbsp;&lt;code&gt;i&lt;/code&gt;&amp;nbsp;能够直接连接到另一个节点 &lt;code&gt;j&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>547. 朋友圈</title>
    <link href="https://www.codesboy.cn/2020/07/14/547_%E6%9C%8B%E5%8F%8B%E5%9C%88/"/>
    <id>https://www.codesboy.cn/2020/07/14/547_%E6%9C%8B%E5%8F%8B%E5%9C%88/</id>
    <published>2020-07-14T13:21:24.000Z</published>
    <updated>2020-07-16T16:47:15.709Z</updated>
    
    <content type="html"><![CDATA[<p>班上有&nbsp;<strong>N&nbsp;</strong>名学生。其中有些人是朋友，有些则不是。他们的友谊具有是传递性。如果已知 A 是 B&nbsp;的朋友，B 是 C&nbsp;的朋友，那么我们可以认为 A 也是 C&nbsp;的朋友。所谓的朋友圈，是指所有朋友的集合。</p><a id="more"></a><p>给定一个&nbsp;<strong>N * N&nbsp;</strong>的矩阵&nbsp;<strong>M</strong>，表示班级中学生之间的朋友关系。如果M[i][j] = 1，表示已知第 i 个和 j 个学生<strong>互为</strong>朋友关系，否则为不知道。你必须输出所有学生中的已知的朋友圈总数。</p><p><strong>示例 1:</strong></p><pre><strong>输入:</strong> [[1,1,0], [1,1,0], [0,0,1]]<strong>输出:</strong> 2 <strong>说明：</strong>已知学生0和学生1互为朋友，他们在一个朋友圈。第2个学生自己在一个朋友圈。所以返回2。</pre><p><strong>示例 2:</strong></p><pre><strong>输入:</strong> [[1,1,0], [1,1,1], [0,1,1]]<strong>输出:</strong> 1<strong>说明：</strong>已知学生0和学生1互为朋友，学生1和学生2互为朋友，所以学生0和学生2也是朋友，所以他们三个在一个朋友圈，返回1。</pre><p><strong>注意：</strong></p><ol>    <li>N 在[1,200]的范围内。</li>    <li>对于所有学生，有M[i][i] = 1。</li>    <li>如果有M[i][j] = 1，则有M[j][i] = 1。</li></ol><div><div>Related Topics</div><div><li>深度优先搜索</li><li>并查集</li></div></div><br/><p>感谢<a href="https://github.com/leetcode-pp/91alg-1/issues/71#issuecomment-657481034">【小漾童鞋找的资料】</a>，然后我就看懂了~</p><p>时间复杂度 O(α(n))，<br>空间复杂度O(n)，n代表人数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findCircleNum</span><span class="params">(<span class="keyword">int</span>[][] M)</span> </span>&#123;</span><br><span class="line">        UnionFindSet unionFindSet = <span class="keyword">new</span> UnionFindSet(M.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (M[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    unionFindSet.unionSet(i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> unionFindSet.getSumOfUnions();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFindSet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] parents;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] ranks;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sumOfUnions;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnionFindSet</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parents = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.parents.length; i++) &#123;</span><br><span class="line">            parents[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.ranks = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line">        <span class="keyword">this</span>.sumOfUnions = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findSet</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x != parents[x]) &#123;</span><br><span class="line">            parents[x] = findSet(parents[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parents[x];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unionSet</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rootX = findSet(x);</span><br><span class="line">        <span class="keyword">int</span> rootY = findSet(y);</span><br><span class="line">        <span class="keyword">if</span> (rootX == rootY) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ranks[rootX] &gt; ranks[rootY]) &#123;</span><br><span class="line">            parents[rootY] = rootX;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parents[rootX] = rootY;</span><br><span class="line">            <span class="keyword">if</span> (ranks[rootX] == ranks[rootY]) &#123;</span><br><span class="line">                ranks[rootY]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.sumOfUnions--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSumOfUnions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sumOfUnions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSumOfUnions</span><span class="params">(<span class="keyword">int</span> sumOfUnions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sumOfUnions = sumOfUnions;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200716020742.png" alt=""></p><hr><p><a href="https://github.com/leetcode-pp/91alg-1/issues/71#issuecomment-658243161">91算法打卡第四十四天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;班上有&amp;nbsp;&lt;strong&gt;N&amp;nbsp;&lt;/strong&gt;名学生。其中有些人是朋友，有些则不是。他们的友谊具有是传递性。如果已知 A 是 B&amp;nbsp;的朋友，B 是 C&amp;nbsp;的朋友，那么我们可以认为 A 也是 C&amp;nbsp;的朋友。所谓的朋友圈，是指所有朋友的集合。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>面试题17.17 多次搜索</title>
    <link href="https://www.codesboy.cn/2020/07/13/%E9%9D%A2%E8%AF%95%E9%A2%9817_17_%E5%A4%9A%E6%AC%A1%E6%90%9C%E7%B4%A2/"/>
    <id>https://www.codesboy.cn/2020/07/13/%E9%9D%A2%E8%AF%95%E9%A2%9817_17_%E5%A4%9A%E6%AC%A1%E6%90%9C%E7%B4%A2/</id>
    <published>2020-07-13T13:21:24.000Z</published>
    <updated>2020-07-13T15:56:47.329Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个较长字符串<code>big</code>和一个包含较短字符串的数组<code>smalls</code>，设计一个方法，根据<code>smalls</code>中的每一个较短字符串，对<code>big</code>进行搜索。输出<code>smalls</code>中的字符串在<code>big</code>里出现的所有位置<code>positions</code>，其中<code>positions[i]</code>为<code>smalls[i]</code>出现的所有位置。</p><a id="more"></a><p><strong>示例：</strong></p><pre><strong>输入：</strong>big = &quot;mississippi&quot;smalls = [&quot;is&quot;,&quot;ppi&quot;,&quot;hi&quot;,&quot;sis&quot;,&quot;i&quot;,&quot;ssippi&quot;]<strong>输出：</strong> [[1,4],[8],[],[3],[1,4,7,10],[5]]</pre><p><strong>提示：</strong></p><ul>    <li><code>0 &lt;= len(big) &lt;= 1000</code></li>    <li><code>0 &lt;= len(smalls[i]) &lt;= 1000</code></li>    <li><code>smalls</code>的总字符数不会超过 100000。</li>    <li>你可以认为<code>smalls</code>中没有重复字符串。</li>    <li>所有出现的字符均为英文小写字母。</li></ul><div><div>Related Topics</div><div><li>字典树</li><li>字符串</li></div></div><br/><p>时间复杂度  </p><p>建树 O(n*m)，n为短单词的个数，m为短单词的平均长度</p><p>搜索 O(S*N)，S为长单词的长度，N为每次长单词的子单词的命中次数。</p><p>空间复杂度</p><p>建树O(m*n)，m为字符集中所占的 字符个数，n为 短单词的个数</p><p>搜索 O(n)，n为命中的个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] multiSearch(String big, String[] smalls) &#123;</span><br><span class="line">        <span class="keyword">if</span> (big == <span class="keyword">null</span> || smalls == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Trie trie = <span class="keyword">new</span> Trie();</span><br><span class="line">        trie.insert(smalls);</span><br><span class="line">        <span class="keyword">int</span>[][] wordSearchList = trie.getWordSearchList(big);</span><br><span class="line">        <span class="keyword">return</span> wordSearchList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span></span>&#123;</span><br><span class="line">    Trie[] next;</span><br><span class="line">    <span class="keyword">boolean</span> end;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">int</span> wordSize;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="keyword">new</span> Trie[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">this</span>.end = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.index = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.wordSize = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String[] words)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wordSize = words.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">            insertWordAndIndex(words[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertWordAndIndex</span><span class="params">(String word, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        Trie curTrie = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">char</span>[] chars = word.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> charIndex = chars[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (curTrie.next[charIndex] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                curTrie.next[charIndex] = <span class="keyword">new</span> Trie();</span><br><span class="line">            &#125;</span><br><span class="line">            curTrie = curTrie.next[charIndex];</span><br><span class="line">        &#125;</span><br><span class="line">        curTrie.end = <span class="keyword">true</span>;</span><br><span class="line">        curTrie.index = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] getWordSearchList(String word) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.wordSize);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.wordSize; i++) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            String curWord = word.substring(i);</span><br><span class="line">            Trie curTrie = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">char</span>[] chars = curWord.toCharArray();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; chars.length; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> charIndex = chars[j] -<span class="string">'a'</span>;</span><br><span class="line">                <span class="keyword">if</span> (curTrie.next[charIndex] != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    curTrie = curTrie.next[charIndex];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (curTrie.end) &#123;</span><br><span class="line">                    List&lt;Integer&gt; subList = list.get(curTrie.index);</span><br><span class="line">                    subList.add(i);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// int[line][column] tips</span></span><br><span class="line">        <span class="keyword">int</span>[][] results = <span class="keyword">new</span> <span class="keyword">int</span>[list.size()][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            List&lt;Integer&gt; subList = list.get(i);</span><br><span class="line">            results[i]=<span class="keyword">new</span> <span class="keyword">int</span>[subList.size()];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; subList.size(); j++) &#123;</span><br><span class="line">                results[i][j] = subList.get(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200713224645.png" alt=""></p><p><a href="https://github.com/leetcode-pp/91alg-1/issues/70#issuecomment-657434460">91算法打卡第四十三天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个较长字符串&lt;code&gt;big&lt;/code&gt;和一个包含较短字符串的数组&lt;code&gt;smalls&lt;/code&gt;，设计一个方法，根据&lt;code&gt;smalls&lt;/code&gt;中的每一个较短字符串，对&lt;code&gt;big&lt;/code&gt;进行搜索。输出&lt;code&gt;smalls&lt;/code&gt;中的字符串在&lt;code&gt;big&lt;/code&gt;里出现的所有位置&lt;code&gt;positions&lt;/code&gt;，其中&lt;code&gt;positions[i]&lt;/code&gt;为&lt;code&gt;smalls[i]&lt;/code&gt;出现的所有位置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>原型模式</title>
    <link href="https://www.codesboy.cn/2020/07/13/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.codesboy.cn/2020/07/13/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-07-13T10:18:24.000Z</published>
    <updated>2020-07-19T08:01:24.136Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h3><p>克隆猴问题：</p><p>现有一只克隆猴，姓名：Sun,年龄：4，颜色：White。请克隆2只Sun，属性一模一样。</p><a id="more"></a><h3 id="传统方式解决克隆问题"><a href="#传统方式解决克隆问题" class="headerlink" title="传统方式解决克隆问题"></a>传统方式解决克隆问题</h3><ol><li>思路分析（图解）</li></ol><p><img src="http://img.codesboy.cn/2020/07/20200714012214.png" alt=""></p><ol start="2"><li>代码演示</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Monkey</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Monkey</span><span class="params">(String name, Integer age, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略 get set 方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Monkey monkey = <span class="keyword">new</span> Monkey(<span class="string">"sun"</span>, <span class="number">4</span>, <span class="string">"White"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//clone</span></span><br><span class="line">        Monkey monkey1 = <span class="keyword">new</span> Monkey(monkey.getName(), monkey.getAge(), monkey.getColor());</span><br><span class="line">        Monkey monkey2 = <span class="keyword">new</span> Monkey(monkey.getName(), monkey.getAge(), monkey.getColor());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传统方式的优缺点"><a href="#传统方式的优缺点" class="headerlink" title="传统方式的优缺点"></a>传统方式的优缺点</h3><ol><li>优点是比较好理解，简单易操作。</li><li>缺点是在创建新对象时，总是需要重新获取原始对象的属性，如果创建的对象比较复杂时，效率较低。</li><li>总是需要重新初始化对象，而不是动态地获取对象运行时的状态，不够灵活。<br>比如 Money类里面有新的属性height，但是并没有放入构造方法参数中。这时候用构造方法初始化就拿不到这个值了。</li></ol><h3 id="改进思路"><a href="#改进思路" class="headerlink" title="改进思路"></a>改进思路</h3><p>在Java中提供了clone()方法来实现对象的克隆，这使得实现原型模式变得简单许多，只是需要相应的Java 类必须实现一个Cloneable接口。</p><p><strong>注意，这里只是为了演示原型模式才实现了cloneable接口，实际项目中不推荐实现cloneable接口。</strong></p><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>原型模式（Prototype模式）是指 用<strong>原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象</strong>。</li><li>原型模式是一种创建型设计模式，允许一个对象再创建另外一个定制的对象，无需知道如何创建的细节。</li><li>通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝他们自己来实施创建，即对象.clone()</li><li>形象的理解：孙大圣拔出猴毛，变出其他孙大圣。</li></ol><h3 id="原型模式的组成"><a href="#原型模式的组成" class="headerlink" title="原型模式的组成"></a>原型模式的组成</h3><p><img src="http://img.codesboy.cn/2020/07/20200717234515.png" alt=""></p><p>结构图说明：</p><ol><li>Prototype: 原型类，声明一个克隆自己的接口。</li><li>ConcretePrototype: 具体的原型类，实现一个克隆自己的操作。</li><li>Client: 让一个原型对象克隆自己，从而创建一个新的对象（属性一样） </li></ol><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Monkey</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Monkey <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Monkey) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略get set 方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Monkey monkey = <span class="keyword">new</span> Monkey(<span class="string">"tom"</span>, <span class="number">2</span>, <span class="string">"white"</span>);</span><br><span class="line">        Monkey monkey1 = monkey.clone();</span><br><span class="line">        Monkey monkey2 = monkey.clone();</span><br><span class="line">        Monkey monkey3 = monkey.clone();</span><br><span class="line">        Monkey monkey4 = monkey.clone();</span><br><span class="line">        Monkey monkey5 = monkey.clone();</span><br><span class="line">        System.out.println(monkey);</span><br><span class="line">        System.out.println(monkey1);</span><br><span class="line">        System.out.println(monkey2);</span><br><span class="line">        System.out.println(monkey3);</span><br><span class="line">        System.out.println(monkey4);</span><br><span class="line">        System.out.println(monkey5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200719155201.png" alt=""></p><p>增加Sheep类的属性height,Client类保持不变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> height = <span class="number">1.2</span>;</span><br></pre></td></tr></table></figure><p>可以看到Client没有任何改变，但通过clone方法，已经拿到height属性值，而不需要传统方式get set 赋值了</p><p><img src="http://img.codesboy.cn/2020/07/20200719155336.png" alt=""></p><h3 id="原型模式在Spring中的应用"><a href="#原型模式在Spring中的应用" class="headerlink" title="原型模式在Spring中的应用"></a>原型模式在Spring中的应用</h3><p>默认单例</p><p><img src="http://img.codesboy.cn/2020/07/20200719020035.png" alt=""></p><p>改成Prototype</p><p><img src="http://img.codesboy.cn/2020/07/20200719020706.png" alt=""></p><p>源码分析</p><p><img src="http://img.codesboy.cn/2020/07/20200719021421.png" alt=""></p><h3 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h3><ol><li>浅拷贝的介绍</li></ol><ul><li>对于数据类型是基本类型的成员变量， 浅拷贝会直接进行值传递，即将该属性值直接复制一份给新的对象。</li><li>对于数据类型是引用数据类型的成员变量，比如说成员变量是一个数组，或者某个类的对象，那么浅拷贝只是引用传递，只是将该成员变量的引用值（内存地址）复制一份给新的对象。因此拷贝对象和被拷贝对象的引用数据类型的成员变量都是指向同一个实例。在这种情况下，如果在其中一个对象中改变引用数据类型的成员变量，会同时影响到另外一个对象的对应成员变量。</li></ul><p><img src="http://img.codesboy.cn/2020/07/20200719140758.png" alt=""></p><ul><li>成员变量为String类型，String也是一个类，为什么被clone的表现和基本类型一样，只是值传递？这是因为String是不可改变的，它被final修饰。克隆后两个引用指向同一个String，但是当修改其中一个时，改的不是String的值，而是重新生成一个新字符串，让被修改的引用指向新的字符串，这样看上去很像基本数据类型的值传递，但实际上是不同的。</li></ul><p><img src="http://img.codesboy.cn/2020/07/20200719141852.png" alt=""></p><ul><li>前面我们讲的克隆猴就是浅拷贝，浅拷贝是使用默认的clone() 方法来实现</li></ul><ol start="2"><li>深拷贝</li></ol><p>2.1 深拷贝的基本介绍</p><ul><li>复制对象的所有基本数据类型的成员变量值</li><li>为所有应用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象可达的所有对象。也就是说，对象进行深拷贝要对整个对象（包括对象的引用类型进行深拷贝）</li><li>深拷贝实现方式1： 重写clone方法进行深拷贝</li><li>深拷贝实现方式2： 对象序列化实现深拷贝（推荐）</li></ul><p>2.2 重写clone方法进行深拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] elements;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elements = <span class="keyword">new</span> Object[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elements.length==size) &#123;</span><br><span class="line">            elements = Arrays.copyOf(elements, <span class="number">2</span> * size + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        ensureCapacity();</span><br><span class="line">        elements[size++] = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">        &#125;</span><br><span class="line">        Object element = elements[--size];</span><br><span class="line">        elements[size] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Stack <span class="title">clone</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Stack result = (Stack)<span class="keyword">super</span>.clone();</span><br><span class="line">            <span class="comment">//《Effective Java》 数组是clone方法唯一吸引人的用法。</span></span><br><span class="line">            result.elements = elements.clone();</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stack stack = <span class="keyword">new</span> Stack();</span><br><span class="line">        stack.push(<span class="string">"aaa"</span>);</span><br><span class="line"></span><br><span class="line">        Stack clone = stack.clone();</span><br><span class="line">        System.out.println(stack);</span><br><span class="line">        System.out.println(clone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200719150215.png" alt=""></p><p>2.3 对象序列化实现深拷贝（推荐）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] elements;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elements = <span class="keyword">new</span> Object[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elements.length==size) &#123;</span><br><span class="line">            elements = Arrays.copyOf(elements, <span class="number">2</span> * size + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        ensureCapacity();</span><br><span class="line">        elements[size++] = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">        &#125;</span><br><span class="line">        Object element = elements[--size];</span><br><span class="line">        elements[size] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Stack <span class="title">deepClone</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建流对象</span></span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        Stack stack = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">            <span class="comment">//当前对象以对象流的方式输出</span></span><br><span class="line">            oos.writeObject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//反序列化</span></span><br><span class="line">            bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">            ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line"></span><br><span class="line">            Stack o = (Stack)ois.readObject();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (oos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    oos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ois != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ois.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stack stack = <span class="keyword">new</span> Stack();</span><br><span class="line">        stack.push(<span class="string">"aaa"</span>);</span><br><span class="line"></span><br><span class="line">        Stack stack1 = stack.deepClone();</span><br><span class="line">        System.out.println(stack1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原型模式的注意事项和细节"><a href="#原型模式的注意事项和细节" class="headerlink" title="原型模式的注意事项和细节"></a>原型模式的注意事项和细节</h3><ol><li>创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程。</li><li>不用重新初始化对象，而是动态地获得对象运行时的状态</li><li>如果原型对象发生变化（增加或者减少属性），其他克隆对象也会相应发生变化，无需改变代码。</li><li>实现深拷贝时可能需要比较复杂的代码。</li><li>缺点：需要为每一个类配置一个克隆方法，这意味着对已有的类进行改造时，需要修改其源代码，违背了OCP原则。</li><li>复制功能最好是由构造器或者工厂提供，而不是通过实现cloneable接口。但是，这条规则最绝对的例外是数组，最好利用clone方法复制数组。</li></ol><br/><p>参考资源: </p><ul><li>韩顺平 《图解Java设计模式》</li><li>《Effective Java》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引文&quot;&gt;&lt;a href=&quot;#引文&quot; class=&quot;headerlink&quot; title=&quot;引文&quot;&gt;&lt;/a&gt;引文&lt;/h3&gt;&lt;p&gt;克隆猴问题：&lt;/p&gt;
&lt;p&gt;现有一只克隆猴，姓名：Sun,年龄：4，颜色：White。请克隆2只Sun，属性一模一样。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.codesboy.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.codesboy.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>677. 键值映射</title>
    <link href="https://www.codesboy.cn/2020/07/12/677_%E9%94%AE%E5%80%BC%E6%98%A0%E5%B0%84/"/>
    <id>https://www.codesboy.cn/2020/07/12/677_%E9%94%AE%E5%80%BC%E6%98%A0%E5%B0%84/</id>
    <published>2020-07-12T13:21:24.000Z</published>
    <updated>2020-07-13T15:50:08.691Z</updated>
    
    <content type="html"><![CDATA[<p>实现一个 MapSum 类里的两个方法，<code>insert</code>&nbsp;和&nbsp;<code>sum</code>。</p><a id="more"></a><p>对于方法&nbsp;<code>insert</code>，你将得到一对（字符串，整数）的键值对。字符串表示键，整数表示值。如果键已经存在，那么原来的键值对将被替代成新的键值对。</p><p>对于方法 <code>sum</code>，你将得到一个表示前缀的字符串，你需要返回所有以该前缀开头的键的值的总和。</p><p><strong>示例 1:</strong></p><pre>输入: insert(&quot;apple&quot;, 3), 输出: Null输入: sum(&quot;ap&quot;), 输出: 3输入: insert(&quot;app&quot;, 2), 输出: Null输入: sum(&quot;ap&quot;), 输出: 5</pre><div><div>Related Topics</div><div><li>字典树</li></div></div><br/><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>空间复杂度O(n)，<br>insert 时间复杂度O(1),<br>sum 时间辅助度O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String,Integer&gt; map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MapSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String key, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    map.put(key, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    Iterator&lt;String&gt; iterator = map.keySet().iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        String next = iterator.next();</span><br><span class="line">        <span class="keyword">if</span> (next.startsWith(prefix)) &#123;</span><br><span class="line">            sum += map.get(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200712122637.png" alt=""></p><hr><h2 id="Trie-map"><a href="#Trie-map" class="headerlink" title="Trie + map"></a>Trie + map</h2><p>空间复杂度O(n)，<br>insert 时间复杂度O(n), n为 单词的长度<br>sum 时间辅助度O(n+m)， n为 单词的长度 , m 为以单词最后的字母为root的所有节点数量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapSum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Trie trie;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialize your data structure here.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MapSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        trie = <span class="keyword">new</span> Trie();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String key, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] singleWord = key.split(<span class="string">""</span>);</span><br><span class="line">        Trie curTrie = <span class="keyword">this</span>.trie;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; singleWord.length; i++) &#123;</span><br><span class="line">            Map&lt;String, Trie&gt; next = curTrie.next;</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                next = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!next.containsKey(singleWord[i])) &#123;</span><br><span class="line">                next.put(singleWord[i], <span class="keyword">new</span> Trie());</span><br><span class="line">            &#125;</span><br><span class="line">            curTrie.next = next;</span><br><span class="line">            curTrie = next.get(singleWord[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        curTrie.end = <span class="keyword">true</span>;</span><br><span class="line">        curTrie.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prefix == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] singleWord = prefix.split(<span class="string">""</span>);</span><br><span class="line">        Trie curTrie = <span class="keyword">this</span>.trie;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; singleWord.length; i++) &#123;</span><br><span class="line">            Map&lt;String, Trie&gt; next = curTrie.next;</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!next.containsKey(singleWord[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            curTrie = next.get(singleWord[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sumOfVal = Trie.getSumOfVal(curTrie);</span><br><span class="line">        <span class="keyword">return</span> sumOfVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Trie&gt; next;</span><br><span class="line">    <span class="keyword">boolean</span> end;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.end = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.val = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSumOfVal</span><span class="params">(Trie trie)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (trie == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        Map&lt;String, Trie&gt; next = trie.next;</span><br><span class="line">        <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Iterator&lt;String&gt; iterator = next.keySet().iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                Trie childTrie = next.get(iterator.next());</span><br><span class="line">                <span class="keyword">int</span> sumOfVal = getSumOfVal(childTrie);</span><br><span class="line">                sum += sumOfVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sum += trie.val;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200712133448.png" alt=""></p><hr><h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h2><p>空间复杂度O(n)，<br>insert 时间复杂度O(n), n为 单词的长度<br>sum 时间辅助度O(n+m)， n为 单词的长度 , m 为以单词最后的字母为root的所有节点数量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapSum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Trie trie;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialize your data structure here.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MapSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        trie = <span class="keyword">new</span> Trie();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String key, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] chars = key.toCharArray();</span><br><span class="line">        Trie curTrie = <span class="keyword">this</span>.trie;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = chars[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (curTrie.next[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                curTrie.next[index] = <span class="keyword">new</span> Trie();</span><br><span class="line">            &#125;</span><br><span class="line">            curTrie=curTrie.next[index];</span><br><span class="line">        &#125;</span><br><span class="line">        curTrie.end = <span class="keyword">true</span>;</span><br><span class="line">        curTrie.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prefix == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] chars = prefix.toCharArray();</span><br><span class="line">        Trie curTrie = <span class="keyword">this</span>.trie;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = chars[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (curTrie.next[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            curTrie= curTrie.next[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sumOfVal = Trie.getSumOfVal(curTrie);</span><br><span class="line">        <span class="keyword">return</span> sumOfVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Trie[] next;</span><br><span class="line">    <span class="keyword">boolean</span> end;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="keyword">new</span> Trie[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">this</span>.end = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.val = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSumOfVal</span><span class="params">(Trie trie)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (trie == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        Trie[] next = trie.next;</span><br><span class="line">        <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; next.length; i++) &#123;</span><br><span class="line">                Trie curTrie = next[i];</span><br><span class="line">                <span class="keyword">int</span> sumOfVal = getSumOfVal(curTrie);</span><br><span class="line">                sum += sumOfVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sum += trie.val;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200712135347.png" alt=""></p><hr><p><a href="https://github.com/leetcode-pp/91alg-1/issues/69#issuecomment-657089236">91算法打卡第四十二天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实现一个 MapSum 类里的两个方法，&lt;code&gt;insert&lt;/code&gt;&amp;nbsp;和&amp;nbsp;&lt;code&gt;sum&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>208. 实现Trie</title>
    <link href="https://www.codesboy.cn/2020/07/11/208_%E5%AE%9E%E7%8E%B0Trie/"/>
    <id>https://www.codesboy.cn/2020/07/11/208_%E5%AE%9E%E7%8E%B0Trie/</id>
    <published>2020-07-11T13:21:24.000Z</published>
    <updated>2020-07-11T17:13:33.962Z</updated>
    
    <content type="html"><![CDATA[<p>实现一个 Trie (前缀树)，包含&nbsp;<code>insert</code>,&nbsp;<code>search</code>, 和&nbsp;<code>startsWith</code>&nbsp;这三个操作。</p><a id="more"></a><p><strong>示例:</strong></p><pre>Trie trie = new Trie();trie.insert(&quot;apple&quot;);trie.search(&quot;apple&quot;);   // 返回 truetrie.search(&quot;app&quot;);     // 返回 falsetrie.startsWith(&quot;app&quot;); // 返回 truetrie.insert(&quot;app&quot;);   trie.search(&quot;app&quot;);     // 返回 true</pre><p><strong>说明:</strong></p><ul>    <li>你可以假设所有的输入都是由小写字母&nbsp;<code>a-z</code>&nbsp;构成的。</li>    <li>保证所有输入均为非空字符串。</li></ul><div><div>Related Topics</div><div><li>设计</li><li>字典树</li></div></div><br/><h2 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h2><p>空间复杂度O(n)</p><p>insert 时间复杂度O(1)，<br>search 时间复杂度O(1) 单词数量少的话，<br>startsWith 时间复杂度O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Map map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize your data structure here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Inserts a word into the trie.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (word == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    map.put(word, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns if the word is in the trie.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.containsKey(word);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns if there is any word in the trie that starts with the given prefix.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">    Iterator iterator = map.keySet().iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        String next = (String) iterator.next();</span><br><span class="line">        <span class="keyword">if</span> (next.startsWith(prefix)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200712000503.png" alt=""></p><h2 id="看群友思路结合Map"><a href="#看群友思路结合Map" class="headerlink" title="看群友思路结合Map"></a>看群友思路结合Map</h2><p>空间复杂度O(n)</p><p>insert 时间复杂度O(n)，<br>search 时间复杂度O(n) ，<br>startsWith 时间复杂度O(n) , n 为单词的长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Trie&gt; next; <span class="comment">//key is all of character</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> end;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize your data structure here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    next = <span class="keyword">new</span> HashMap();</span><br><span class="line">    end = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Inserts a word into the trie.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (word==<span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String[] singleWord = word.split(<span class="string">""</span>);</span><br><span class="line">    Trie curTrie = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; singleWord.length; i++) &#123;</span><br><span class="line">        Map&lt;String, Trie&gt; curTrieMap = curTrie.next;</span><br><span class="line">        <span class="keyword">if</span> (curTrieMap == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            curTrieMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!curTrieMap.containsKey(singleWord[i])) &#123;</span><br><span class="line">            curTrieMap.put(singleWord[i], <span class="keyword">new</span> Trie());</span><br><span class="line">        &#125;</span><br><span class="line">        curTrie.next = curTrieMap;</span><br><span class="line">        curTrie = curTrieMap.get(singleWord[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    curTrie.end = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns if the word is in the trie.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (word == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String[] singleWord = word.split(<span class="string">""</span>);</span><br><span class="line">    Trie curTrie = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; singleWord.length; i++) &#123;</span><br><span class="line">        Map&lt;String, Trie&gt; next = curTrie.next;</span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curTrie = next.get(singleWord[i]);</span><br><span class="line">        <span class="keyword">if</span> (curTrie == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curTrie.end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns if there is any word in the trie that starts with the given prefix.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (word == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String[] singleWord = word.split(<span class="string">""</span>);</span><br><span class="line">    Trie curTrie = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; singleWord.length; i++) &#123;</span><br><span class="line">        Map&lt;String, Trie&gt; next = curTrie.next;</span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curTrie = next.get(singleWord[i]);</span><br><span class="line">        <span class="keyword">if</span> (curTrie == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200712000417.png" alt=""></p><h2 id="群友思路"><a href="#群友思路" class="headerlink" title="群友思路"></a>群友思路</h2><p>数组查询速度快了很多啊。。。</p><p>空间复杂度O(n)</p><p>insert 时间复杂度O(n)，<br>search 时间复杂度O(n) ，<br>startsWith 时间复杂度O(n) , n 为单词的长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">Trie[] next; <span class="comment">// store a - z</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> end;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize your data structure here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    next = <span class="keyword">new</span> Trie[<span class="number">26</span>]; <span class="comment">//store a - z</span></span><br><span class="line">    end = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Inserts a word into the trie.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (word == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] chars = word.toCharArray();</span><br><span class="line">    Trie curTrie = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = chars[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span> (curTrie.next[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">            curTrie.next[index] = <span class="keyword">new</span> Trie();</span><br><span class="line">        &#125;</span><br><span class="line">        curTrie = curTrie.next[index];</span><br><span class="line">    &#125;</span><br><span class="line">    curTrie.end = <span class="keyword">true</span>; <span class="comment">// the word is end</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns if the word is in the trie.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (word == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] chars = word.toCharArray();</span><br><span class="line">    Trie curTrie = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = chars[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span> (curTrie.next[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curTrie = curTrie.next[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> curTrie.end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns if there is any word in the trie that starts with the given prefix.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (word == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] chars = word.toCharArray();</span><br><span class="line">    Trie curTrie = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = chars[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span> (curTrie.next[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curTrie = curTrie.next[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200712004619.png" alt=""></p><p><a href="https://github.com/leetcode-pp/91alg-1/issues/68#issuecomment-657077878">91算法打卡第四十一天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实现一个 Trie (前缀树)，包含&amp;nbsp;&lt;code&gt;insert&lt;/code&gt;,&amp;nbsp;&lt;code&gt;search&lt;/code&gt;, 和&amp;nbsp;&lt;code&gt;startsWith&lt;/code&gt;&amp;nbsp;这三个操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>144. 二叉树的前序遍历 | 94. 二叉树的中序遍历 | 145. 二叉树的后序遍历 | 102. 二叉树的层序遍历</title>
    <link href="https://www.codesboy.cn/2020/07/10/144_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>https://www.codesboy.cn/2020/07/10/144_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</id>
    <published>2020-07-10T13:21:24.000Z</published>
    <updated>2020-07-11T17:13:11.904Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个二叉树，返回它的&nbsp;<em>前序&nbsp;</em>遍历。</p><a id="more"></a><p>&nbsp;<strong>示例:</strong></p><pre><strong>输入:</strong> [1,null,2,3]     1    \     2    /   3 <strong>输出:</strong> [1,2,3]</pre><p><strong>进阶:</strong>&nbsp;递归算法很简单，你可以通过迭代算法完成吗？</p><div><div>Related Topics</div><div><li>栈</li><li>树</li></div></div><br/><p>时间复杂度：O(n)<br>空间复杂度：O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line">    list.add(root.val);</span><br><span class="line">    preorderTraversal(root.left);</span><br><span class="line">    preorderTraversal(root.right);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200710215117.png" alt=""></p><hr><h2 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94. 二叉树的中序遍历"></a>94. 二叉树的中序遍历</h2><p>给定一个二叉树，返回它的<em>中序&nbsp;</em>遍历。</p><p><strong>示例:</strong></p><pre><strong>输入:</strong> [1,null,2,3]   1    \     2    /   3<strong>输出:</strong> [1,3,2]</pre><p><strong>进阶:</strong>&nbsp;递归算法很简单，你可以通过迭代算法完成吗？</p><div><div>Related Topics</div><div><li>栈</li><li>树</li><li>哈希表</li></div></div><br/><p>时间复杂度：O(n)<br>空间复杂度：O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    inorderTraversal(root.left);</span><br><span class="line">    list.add(root.val);</span><br><span class="line">    inorderTraversal(root.right);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200710215914.png" alt=""></p><hr><h2 id="145-二叉树的后序遍历"><a href="#145-二叉树的后序遍历" class="headerlink" title="145. 二叉树的后序遍历"></a>145. 二叉树的后序遍历</h2><p>给定一个二叉树，返回它的 <em>后序&nbsp;</em>遍历。</p><p><strong>示例:</strong></p><pre><strong>输入:</strong> [1,null,2,3]     1    \     2    /   3 <strong>输出:</strong> [3,2,1]</pre><p><strong>进阶:</strong>&nbsp;递归算法很简单，你可以通过迭代算法完成吗？</p><div><div>Related Topics</div><div><li>栈</li><li>树</li></div></div><br/><p>时间复杂度：O(n)<br>空间复杂度：O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    postorderTraversal(root.left);</span><br><span class="line">    postorderTraversal(root.right);</span><br><span class="line">    list.add(root.val);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200710220233.png" alt=""></p><hr><h2 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a>102. 二叉树的层序遍历</h2><p>给你一个二叉树，请你返回其按 <strong>层序遍历</strong> 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p><p>&nbsp;</p><p><strong>示例：</strong><br>二叉树：<code>[3,9,20,null,null,15,7]</code>,</p><pre>    3   / \  9  20    /  \   15   7</pre><p>返回其层次遍历结果：</p><pre>[  [3],  [9,20],  [15,7]]</pre><div><div>Related Topics</div><div><li>树</li><li>广度优先搜索</li></div></div><br/><p>时间复杂度：O(n)<br>空间复杂度：O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> size = queue.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            TreeNode treeNode = queue.poll();</span><br><span class="line">            integers.add(treeNode.val);</span><br><span class="line">            <span class="keyword">if</span> (treeNode.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.offer(treeNode.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (treeNode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.offer(treeNode.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(integers);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200710222646.png" alt=""></p><p><a href="https://github.com/azl397985856/leetcode/blob/master/thinkings/binary-tree-traversal.md">91算法打卡第四十天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个二叉树，返回它的&amp;nbsp;&lt;em&gt;前序&amp;nbsp;&lt;/em&gt;遍历。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>网易面试题：超过班级百分之几</title>
    <link href="https://www.codesboy.cn/2020/07/09/%E7%BD%91%E6%98%93%E9%9D%A2%E8%AF%95%E9%A2%98_%E8%B6%85%E8%BF%87%E7%8F%AD%E7%BA%A7%E7%99%BE%E5%88%86%E4%B9%8B%E5%87%A0/"/>
    <id>https://www.codesboy.cn/2020/07/09/%E7%BD%91%E6%98%93%E9%9D%A2%E8%AF%95%E9%A2%98_%E8%B6%85%E8%BF%87%E7%8F%AD%E7%BA%A7%E7%99%BE%E5%88%86%E4%B9%8B%E5%87%A0/</id>
    <published>2020-07-09T13:21:24.000Z</published>
    <updated>2020-07-09T16:24:33.406Z</updated>
    
    <content type="html"><![CDATA[<p>有一个班级有&nbsp;<em>n</em>  个人，给出&nbsp;<em>n</em>  个元素，第&nbsp;<em>i</em>  个元素代表 第&nbsp;<em>i</em>  位同学的考试成绩，接下进行&nbsp;<em>m</em>  次询问，每次询问给出一个数值&nbsp; <em>t</em> ，表示第&nbsp;<em>t </em> 个同学，然后需要我们输出第 &nbsp;<em>t</em> 个同学的成绩超过班级百分之几的人，百分数&nbsp;<em>p</em>  可以这样算：p = (不超过第 t 个同学分数的人数 ) / n * 100%。输出的时候保留到小数点后 6 位，并且需要四舍五入。<a id="more"></a><p>输入描述：第一行输入两个数&nbsp;<em>n</em>  和&nbsp;<em>m</em> ，两个数以空格隔开，表示 &nbsp;<em>n</em> 个同学和&nbsp;<em> m</em> 次询问。第二行输入 &nbsp;<em>numns1</em> 个数值 &nbsp;<em>ni</em>，表示每个同学的分数，第三行输入&nbsp;<em> m</em> 个数值&nbsp;<em>mi</em>，表示每次询问是询问第几个同学。（注意，这里 2&lt;=&nbsp;<em>n</em>，&nbsp;<em>m</em>&lt;=100000，0&lt;=&nbsp;<em>ni</em>&lt;=150，1&lt;=&nbsp;<em>mi</em>&lt;=&nbsp;<em>n</em>）</p></p><p>输出描述：输出&nbsp;<em>m</em>  行，每一行输出一个百分数&nbsp;<em>p</em> ，代表超过班级百分之几的人。</p><p><strong>示例:</strong></p><pre><strong>输入:</strong>3 250 60 701 2<strong>输出:</strong>33.333333%66.666667%<br/>时间复杂度O(n), n 位学生数量空间复杂度O(1)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] getPercentArray(<span class="keyword">int</span>[] personsAndCount, <span class="keyword">int</span>[] score, <span class="keyword">int</span>[] indexs) &#123;</span><br><span class="line">    <span class="keyword">int</span> persons = personsAndCount[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> count = personsAndCount[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span>[] allscores = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">151</span>];</span><br><span class="line">    <span class="keyword">int</span>[] exceedPersonsByScore = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">151</span>];</span><br><span class="line">    String[] values = <span class="keyword">new</span> String[count];</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//get the every score person count</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; persons; i++) &#123;</span><br><span class="line">        allscores[score[i]] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//get the every score exceed person count</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">151</span>; i++) &#123;</span><br><span class="line">        sum += allscores[i];</span><br><span class="line">        exceedPersonsByScore[i] = sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> exceedPersons = exceedPersonsByScore[score[indexs[i] - <span class="number">1</span>]];</span><br><span class="line">        BigDecimal value = <span class="keyword">new</span> BigDecimal(exceedPersons).multiply(<span class="keyword">new</span> BigDecimal(<span class="number">100</span>)).divide(<span class="keyword">new</span> BigDecimal(persons), <span class="number">6</span>, RoundingMode.HALF_UP);</span><br><span class="line">        values[i] = value.toString() + <span class="string">"%"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>[91算法打卡第三十九天参考答案](https://github.com/azl397985856/leetcode/blob/master/problems/206.reverse-linked-list.md)]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一个班级有&amp;nbsp;&lt;em&gt;n&lt;/em&gt;  个人，给出&amp;nbsp;&lt;em&gt;n&lt;/em&gt;  个元素，第&amp;nbsp;&lt;em&gt;i&lt;/em&gt;  个元素代表 第&amp;nbsp;&lt;em&gt;i&lt;/em&gt;  位同学的考试成绩，接下进行&amp;nbsp;&lt;em&gt;m&lt;/em&gt;  次询问，每次询问给出一个数值&amp;nbsp; &lt;em&gt;t&lt;/em&gt; ，表示第&amp;nbsp;&lt;em&gt;t &lt;/em&gt; 个同学，然后需要我们输出第 &amp;nbsp;&lt;em&gt;t&lt;/em&gt; 个同学的成绩超过班级百分之几的人，百分数&amp;nbsp;&lt;em&gt;p&lt;/em&gt;  可以这样算：p = (不超过第 t 个同学分数的人数 ) / n * 100%。输出的时候保留到小数点后 6 位，并且需要四舍五入。
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>206. 反转链表 | 92. 反转链表 II | 25. K 个一组翻转链表</title>
    <link href="https://www.codesboy.cn/2020/07/08/92_%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8II/"/>
    <id>https://www.codesboy.cn/2020/07/08/92_%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8II/</id>
    <published>2020-07-08T15:21:24.000Z</published>
    <updated>2020-07-08T18:12:24.711Z</updated>
    
    <content type="html"><![CDATA[<p>反转一个单链表。</p><p><strong>示例:</strong></p><a id="more"></a><pre><strong>输入:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<strong>输出:</strong> 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</pre><p><strong>进阶:</strong><br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p><div><div>Related Topics</div><div><li>链表</li></div></div><br/><p>方法1——迭代<br>时间复杂度O(n)，<br>空间复杂度O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">   ListNode temp = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (head.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ListNode tempHead = head;</span><br><span class="line">        head = head.next;</span><br><span class="line">        tempHead.next = temp;</span><br><span class="line">        temp = tempHead;</span><br><span class="line">    &#125;</span><br><span class="line">    head.next = temp;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200708211619.png" alt=""></p><p>方法2——递归<br>时间复杂度O(n)，<br>空间复杂度O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ListNode last = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    reverse(head);</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        last = head;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode tempHead = head.next;</span><br><span class="line">    head.next = <span class="keyword">null</span>;</span><br><span class="line">    reverse(tempHead);</span><br><span class="line">    tempHead.next = head;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200708213503.png" alt=""></p><br><hr><br><h2 id="92-反转链表-II"><a href="#92-反转链表-II" class="headerlink" title="92. 反转链表 II"></a>92. 反转链表 II</h2><p>反转从位置 <em>m</em> 到 <em>n</em> 的链表。请使用一趟扫描完成反转。</p><p><strong>说明:</strong><br>1 &le;&nbsp;<em>m</em>&nbsp;&le;&nbsp;<em>n</em>&nbsp;&le; 链表长度。</p><p><strong>示例:</strong></p><pre><strong>输入:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, <em>m</em> = 2, <em>n</em> = 4<strong>输出:</strong> 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</pre><div><div>Related Topics</div><div><li>链表</li></div></div><br/><p>迭代</p><p>思路：记录位置m-1的listnode A和 n+1 的 listnode B , 翻转 m-n 的子链表，得到翻转后的子链表的 head listnode C 和 tail listnode D ，然后 A -&gt;C -&gt; D -&gt;B </p><p>时间复杂度O(n)，<br>空间复杂度O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">    ListNode top = head;</span><br><span class="line">    <span class="comment">//reverse children listnode</span></span><br><span class="line">    ListNode temp = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//disreverse  listnode left index</span></span><br><span class="line">    ListNode left = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//disreverse  listnode right index</span></span><br><span class="line">    ListNode right = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//reverse children listnode right index</span></span><br><span class="line">    ListNode innerRight = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == m - <span class="number">1</span> &amp;&amp; m &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            left = head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == n + <span class="number">1</span>) &#123;</span><br><span class="line">            right = head;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode next = head.next;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= m &amp;&amp; index &lt;= n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index == m) &#123;</span><br><span class="line">                innerRight = head;</span><br><span class="line">            &#125;</span><br><span class="line">            head.next = temp;</span><br><span class="line">            temp = head;</span><br><span class="line">        &#125;</span><br><span class="line">        head = next;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (left != <span class="keyword">null</span>) &#123;</span><br><span class="line">        left.next = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (innerRight != <span class="keyword">null</span>) &#123;</span><br><span class="line">        innerRight.next = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200708225611.png" alt=""></p><br><hr><br><h2 id="25-K-个一组翻转链表"><a href="#25-K-个一组翻转链表" class="headerlink" title="25. K 个一组翻转链表"></a>25. K 个一组翻转链表</h2><p>给你一个链表，每&nbsp;<em>k&nbsp;</em>个节点一组进行翻转，请你返回翻转后的链表。</p><p><em>k&nbsp;</em>是一个正整数，它的值小于或等于链表的长度。</p><p>如果节点总数不是&nbsp;<em>k&nbsp;</em>的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p>&nbsp;</p><p><strong>示例：</strong></p><p>给你这个链表：<code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p><p>当&nbsp;<em>k&nbsp;</em>= 2 时，应当返回: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p><p>当&nbsp;<em>k&nbsp;</em>= 3 时，应当返回: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p><p>&nbsp;</p><p><strong>说明：</strong></p><ul>    <li>你的算法只能使用常数的额外空间。</li>    <li><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际进行节点交换。</li></ul><div><div>Related Topics</div><div><li>链表</li></div></div><br><p>迭代 </p><p>思路：每k个一组翻转，分为偶数组和奇数组，当偶数组时，就把前面的奇数组的最后一个next 改成 当前偶数组的 head，当奇数组时，就把前面的偶数组的最后一个next 改成 当前奇数组的 head。</p><p>(reverseCount &amp; 1) == 0 用来判断是否为偶数，方法来自小灰算法。</p><p>时间复杂度O(n)，<br>空间复杂度O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">ListNode oddReverseChildHead = <span class="keyword">null</span>;</span><br><span class="line">ListNode oddReverseChildTail = <span class="keyword">null</span>;</span><br><span class="line">ListNode evenReverseChildHead = <span class="keyword">null</span>;</span><br><span class="line">ListNode evenReverseChildTail = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">int</span> reverseCount = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode childHead = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    ListNode top = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> firstFlag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ListNode tempHead = head.next;</span><br><span class="line">        <span class="keyword">if</span> (index % k == <span class="number">0</span>) &#123;</span><br><span class="line">            head.next = <span class="keyword">null</span>;</span><br><span class="line">            reverseChild(childHead);</span><br><span class="line">            <span class="keyword">if</span> (firstFlag) &#123;</span><br><span class="line">                top = head;</span><br><span class="line">                firstFlag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((reverseCount &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123; <span class="comment">//is even</span></span><br><span class="line">                oddReverseChildTail.next = evenReverseChildHead;</span><br><span class="line">                oddReverseChildHead = <span class="keyword">null</span>;</span><br><span class="line">                oddReverseChildTail = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (evenReverseChildHead != <span class="keyword">null</span>) &#123; <span class="comment">// is old</span></span><br><span class="line">                    evenReverseChildTail.next = oddReverseChildHead;</span><br><span class="line">                    evenReverseChildHead = <span class="keyword">null</span>;</span><br><span class="line">                    evenReverseChildTail = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            childHead = <span class="keyword">null</span>;</span><br><span class="line">            reverseCount++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index % k == <span class="number">1</span>) &#123;</span><br><span class="line">            childHead = head;</span><br><span class="line">        &#125;</span><br><span class="line">        head = tempHead;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((reverseCount &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123; <span class="comment">// is even</span></span><br><span class="line">        oddReverseChildTail.next = childHead;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// is odd</span></span><br><span class="line">        evenReverseChildTail.next = childHead;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverseChild</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode top = <span class="keyword">null</span>;</span><br><span class="line">    ListNode tail = head;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ListNode tempHead = head.next;</span><br><span class="line">        head.next = top;</span><br><span class="line">        top = head;</span><br><span class="line">        head = tempHead;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((reverseCount &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;  <span class="comment">// is even</span></span><br><span class="line">        evenReverseChildHead = top;</span><br><span class="line">        evenReverseChildTail = tail;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//is odd</span></span><br><span class="line">        oddReverseChildHead = top;</span><br><span class="line">        oddReverseChildTail = tail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200709005556.png" alt=""></p><p><a href="https://github.com/azl397985856/leetcode/blob/master/problems/25.reverse-nodes-in-k-groups-cn.md">91算法打卡第三十八天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;反转一个单链表。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>20. 有效的括号 | 32. 最长有效括号</title>
    <link href="https://www.codesboy.cn/2020/07/07/20_%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <id>https://www.codesboy.cn/2020/07/07/20_%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</id>
    <published>2020-07-07T15:21:24.000Z</published>
    <updated>2020-07-08T18:20:18.702Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;{&#39;</code>，<code>&#39;}&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code>&nbsp;的字符串，判断字符串是否有效。</p><a id="more"></a><p>有效字符串需满足：</p><ol>    <li>左括号必须用相同类型的右括号闭合。</li>    <li>左括号必须以正确的顺序闭合。</li></ol><p>注意空字符串可被认为是有效字符串。</p><p><strong>示例 1:</strong></p><pre><strong>输入:</strong> &quot;()&quot;<strong>输出:</strong> true</pre><p><strong>示例&nbsp;2:</strong></p><pre><strong>输入:</strong> &quot;()[]{}&quot;<strong>输出:</strong> true</pre><p><strong>示例&nbsp;3:</strong></p><pre><strong>输入:</strong> &quot;(]&quot;<strong>输出:</strong> false</pre><p><strong>示例&nbsp;4:</strong></p><pre><strong>输入:</strong> &quot;([)]&quot;<strong>输出:</strong> false</pre><p><strong>示例&nbsp;5:</strong></p><pre><strong>输入:</strong> &quot;{[]}&quot;<strong>输出:</strong> true</pre><div><div>Related Topics</div><div><li>栈</li><li>字符串</li></div></div><br/><p>第一种思路，用栈解答<br>时间复杂度O(n)，<br>空间复杂度O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s.length() % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;Character&gt; chars = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i)==<span class="string">'('</span>||s.charAt(i)==<span class="string">'['</span>||s.charAt(i)==<span class="string">'&#123;'</span>) &#123;</span><br><span class="line">            chars.push(s.charAt(i));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (chars.size() == <span class="number">0</span> || getCharMapping(chars.pop()) != s.charAt(i)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> chars.isEmpty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">getCharMapping</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">')'</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'['</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">']'</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'&#123;'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&#125;'</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"invalid char"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200707220650.png" alt=""></p><p>第二种思路用正则，<br>时间复杂度O(n)，<br>空间复杂度O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (s.contains(<span class="string">"&#123;&#125;"</span>) || s.contains(<span class="string">"[]"</span>) || s.contains(<span class="string">"()"</span>)) &#123;</span><br><span class="line">        s = s.replaceAll(<span class="string">"\\&#123;&#125;"</span> , <span class="string">""</span>);</span><br><span class="line">        s = s.replaceAll(<span class="string">"\\[]"</span> , <span class="string">""</span>);</span><br><span class="line">        s = s.replace(<span class="string">"()"</span>, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.length() == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200707220752.png" alt=""></p><br><hr><br><h2 id="32-最长有效括号"><a href="#32-最长有效括号" class="headerlink" title="32. 最长有效括号"></a>32. 最长有效括号</h2><p>给定一个只包含 <code>&#39;(&#39;</code>&nbsp;和 <code>&#39;)&#39;</code>&nbsp;的字符串，找出最长的包含有效括号的子串的长度。</p><p><strong>示例&nbsp;1:</strong></p><pre><strong>输入:</strong> &quot;(()&quot;<strong>输出:</strong> 2<strong>解释:</strong> 最长有效括号子串为 <code>&quot;()&quot;</code></pre><p><strong>示例 2:</strong></p><pre><strong>输入:</strong> &quot;<code>)()())</code>&quot;<strong>输出:</strong> 4<strong>解释:</strong> 最长有效括号子串为 <code>&quot;()()&quot;</code></pre><div><div>Related Topics</div><div><li>字符串</li><li>动态规划</li></div></div><br><p><a href="https://github.com/azl397985856/leetcode/blob/master/problems/32.longest-valid-parentheses.md">91算法打卡第三十七天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个只包括 &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;#39;{&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;#39;}&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;#39;[&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;#39;]&amp;#39;&lt;/code&gt;&amp;nbsp;的字符串，判断字符串是否有效。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>抽象工厂模式</title>
    <link href="https://www.codesboy.cn/2020/07/07/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.codesboy.cn/2020/07/07/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-07-07T10:18:24.000Z</published>
    <updated>2020-07-12T17:01:02.111Z</updated>
    
    <content type="html"><![CDATA[<p>阅读本文之前，请先阅读《工厂方法模式》一文。</p><p>引文：</p><pre><code>《工厂方法模式》一文的披萨项目又迎来重大升级了。现在披萨产品可以放各式各样的定制食材，如下图。</code></pre><p><img src="http://img.codesboy.cn/2020/07/20200712222538.png" alt=""></p><a id="more"></a><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li><p>每一个模式都是针对一定问题的解决方案。抽象工厂模式面对的问题是多个产品等级结构的设计。</p></li><li><p>抽象工厂模式提供一个接口，用来创建相关或依赖<strong>对象的家族</strong>，而不需要明确指定具体类。</p></li><li><p>抽象工厂模式是工厂方法模式的升级版，工厂方法模式针对的是一个产品等级结构（工厂模式一文的Pizza 产品等级），而抽象工厂模式针对的是多个产品等级结构（本文中的Cheese、Sauce、Viggies 产品等级）。</p><p> 以本文的原料工厂为例，解释下产品族、产品等级结构</p></li></ol><p><img src="http://img.codesboy.cn/2020/07/20200713003136.png" alt=""></p><h3 id="抽象工厂模式的组成"><a href="#抽象工厂模式的组成" class="headerlink" title="抽象工厂模式的组成"></a>抽象工厂模式的组成</h3><p><img src="http://img.codesboy.cn/2020/07/20200708080305.png" alt=""></p><p>与工厂方法模式一样，使用抽象工厂模式的系统涉及以下的角色：</p><ul><li>抽象工厂(Creator)角色：抽象工厂模式的核心，与应用程序无关。任何在抽象工厂模式中创建对象的工厂类 必须实现这个接口或者实现这个抽象类(如果抽象工厂角色是由抽象类实现的话)。</li><li>具体工厂(Concrete Creator) 角色：它含有与应用相关的逻辑，并且受到应用程序的调用从而创建产品对象。</li><li>抽象产品(Product)角色：它是抽象工厂模式所创建的对象的超类型，具体产品继承的父类或者是实现的接口。</li><li>具体产品(Concrete Product) 角色: 这个角色实现了抽象产品角色所声明的接口。抽象工厂模式所创建的每一个对象都是某个具体产品角色的实例。这是客户端最终需要的东西，其内部一定充满了应用系统的商业逻辑。</li></ul><h3 id="代码思路分析-类图"><a href="#代码思路分析-类图" class="headerlink" title="代码思路分析(类图)"></a>代码思路分析(类图)</h3><p><img src="http://img.codesboy.cn/2020/07/20200712204332.png" alt=""></p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原料</span></span><br><span class="line"><span class="comment">//cheese</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cheese</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//意大利白干酪</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MozzarellaCheese</span> <span class="keyword">implements</span> <span class="title">Cheese</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//韩国白干酪</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KoreaCheese</span> <span class="keyword">implements</span> <span class="title">Cheese</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sauce</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//番茄酱料</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TomatoSauce</span> <span class="keyword">implements</span> <span class="title">Sauce</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//超甜番茄酱料</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SweetTomatoSauce</span> <span class="keyword">implements</span> <span class="title">Sauce</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Veggies</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//黑橄榄</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackOlive</span> <span class="keyword">implements</span> <span class="title">Veggies</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//黑胡椒</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackPepper</span> <span class="keyword">implements</span> <span class="title">Veggies</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//胡萝卜</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Carrot</span> <span class="keyword">implements</span> <span class="title">Veggies</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//茄子</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">eggplant</span> <span class="keyword">implements</span> <span class="title">Veggies</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//大蒜</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Garlic</span> <span class="keyword">implements</span> <span class="title">Veggies</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//洋葱</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Onion</span> <span class="keyword">implements</span> <span class="title">Veggies</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//披萨草</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Oregano</span> <span class="keyword">implements</span> <span class="title">Veggies</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//红薯</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedPotato</span> <span class="keyword">implements</span> <span class="title">Veggies</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//白胡椒</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhitePepper</span> <span class="keyword">implements</span> <span class="title">Veggies</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//原料工厂接口 -- 抽象工厂模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PizzaIngredientFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Sauce <span class="title">createSauce</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Cheese <span class="title">createCheese</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    Veggies[] createVeggies();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//纽约原料工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NYPizzaIngredientFactory</span> <span class="keyword">implements</span> <span class="title">PizzaIngredientFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sauce <span class="title">createSauce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SweetTomatoSauce();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cheese <span class="title">createCheese</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KoreaCheese();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Veggies[] createVeggies() &#123;</span><br><span class="line">        Veggies[] veggies = &#123;<span class="keyword">new</span> Garlic(),<span class="keyword">new</span> Onion(),<span class="keyword">new</span> Carrot(),<span class="keyword">new</span> RedPotato(),<span class="keyword">new</span> BlackPepper()&#125;;</span><br><span class="line">        <span class="keyword">return</span> veggies;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//芝加哥原料工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChicagoPizzaIngredientFactory</span> <span class="keyword">implements</span> <span class="title">PizzaIngredientFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sauce <span class="title">createSauce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TomatoSauce();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cheese <span class="title">createCheese</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MozzarellaCheese();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Veggies[] createVeggies() &#123;</span><br><span class="line">        Veggies[] veggies = &#123;<span class="keyword">new</span> Oregano(),<span class="keyword">new</span> BlackOlive(),<span class="keyword">new</span> eggplant(),<span class="keyword">new</span> WhitePepper()&#125;;</span><br><span class="line">        <span class="keyword">return</span> veggies;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pizza</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    Sauce sauce;</span><br><span class="line">    Veggies[] veggies;</span><br><span class="line">    Cheese cheese;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//准备原材料，不同的披萨不一样，因此，我们做成抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" banking..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" cutting..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" boxing..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Pizza&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", sauce="</span> + sauce +</span><br><span class="line">                <span class="string">", veggies="</span> + Arrays.toString(veggies) +</span><br><span class="line">                <span class="string">", cheese="</span> + cheese +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    PizzaIngredientFactory pizzaIngredientFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CheesePizza</span><span class="params">(PizzaIngredientFactory pizzaIngredientFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pizzaIngredientFactory = pizzaIngredientFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sauce = pizzaIngredientFactory.createSauce();</span><br><span class="line">        cheese = pizzaIngredientFactory.createCheese();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PepperPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    PizzaIngredientFactory pizzaIngredientFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PepperPizza</span><span class="params">(PizzaIngredientFactory pizzaIngredientFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pizzaIngredientFactory = pizzaIngredientFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cheese = pizzaIngredientFactory.createCheese();</span><br><span class="line">        veggies = pizzaIngredientFactory.createVeggies();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VeggiePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    PizzaIngredientFactory pizzaIngredientFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VeggiePizza</span><span class="params">(PizzaIngredientFactory pizzaIngredientFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pizzaIngredientFactory = pizzaIngredientFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sauce = pizzaIngredientFactory.createSauce();</span><br><span class="line">        veggies = pizzaIngredientFactory.createVeggies();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Pizza store -- 原料工厂的客户端，pizza store使用了 工厂方法模式，详见工厂模式一文</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line">    <span class="function">Pizza <span class="title">createPizza</span><span class="params">(String type)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NYPizzaStore</span> <span class="keyword">implements</span> <span class="title">PizzaStore</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CHEESE_PIZZA = <span class="string">"cheese"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String VEGGIE_PIZZA = <span class="string">"viggie"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String PEPPER_PIZZA = <span class="string">"pepper"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        PizzaIngredientFactory pizzaIngredientFactory = <span class="keyword">new</span> NYPizzaIngredientFactory();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (CHEESE_PIZZA.equalsIgnoreCase(type)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CheesePizza(pizzaIngredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">"New York Style Cheese Pizza"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(VEGGIE_PIZZA.equalsIgnoreCase(type))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> VeggiePizza(pizzaIngredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">"New York Style Veggie Pizza"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(PEPPER_PIZZA.equalsIgnoreCase(type))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> PepperPizza(pizzaIngredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">"New York Style Pepper Pizza"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChicagoPizzaStore</span> <span class="keyword">implements</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CHEESE_PIZZA = <span class="string">"cheese"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String VEGGIE_PIZZA = <span class="string">"viggie"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String PEPPER_PIZZA = <span class="string">"pepper"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        PizzaIngredientFactory pizzaIngredientFactory = <span class="keyword">new</span> ChicagoPizzaIngredientFactory();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (CHEESE_PIZZA.equalsIgnoreCase(type)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CheesePizza(pizzaIngredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">"Chicago Style Cheese Pizza"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(VEGGIE_PIZZA.equalsIgnoreCase(type))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> VeggiePizza(pizzaIngredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">"Chicago Style Veggie Pizza"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(PEPPER_PIZZA.equalsIgnoreCase(type))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> PepperPizza(pizzaIngredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">"Chicago Style Pepper Pizza"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Pizza Store 的客户端 和 测试方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    PizzaStore pizzaStore;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderPizza</span><span class="params">(PizzaStore pizzaStore)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pizzaStore = pizzaStore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">orderPizza</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        Pizza pizza ;</span><br><span class="line">        pizza = pizzaStore.createPizza(type);</span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OrderPizza orderPizza = <span class="keyword">new</span> OrderPizza(<span class="keyword">new</span> NYPizzaStore());</span><br><span class="line">        Pizza cheese = orderPizza.orderPizza(<span class="string">"cheese"</span>);</span><br><span class="line"></span><br><span class="line">        OrderPizza orderPizza1 = <span class="keyword">new</span> OrderPizza(<span class="keyword">new</span> ChicagoPizzaStore());</span><br><span class="line">        Pizza cheese1 = orderPizza1.orderPizza(<span class="string">"cheese"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么情况下应当使用抽象工厂模式"><a href="#什么情况下应当使用抽象工厂模式" class="headerlink" title="什么情况下应当使用抽象工厂模式"></a>什么情况下应当使用抽象工厂模式</h3><ul><li>一个系统不应该依赖于产品类实例如何被创建、组合和表达的细节，这对于所有形态的工厂模式都是重要的。</li><li>这个系统的产品有多于一个的产品族。</li><li>同属于同一个产品族的产品是在一起使用的，这个约束必须在系统的设计中体现出来。<br>比如，纽约披萨用的是KoreaCheese、SweetTomatoSauce,这两个产品是在同一产品族下的。</li></ul><p>参考资源: </p><ul><li>《Java与模式》</li><li>《Head first 设计模式》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阅读本文之前，请先阅读《工厂方法模式》一文。&lt;/p&gt;
&lt;p&gt;引文：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;《工厂方法模式》一文的披萨项目又迎来重大升级了。现在披萨产品可以放各式各样的定制食材，如下图。&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://img.codesboy.cn/2020/07/20200712222538.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.codesboy.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.codesboy.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>62. 不同路径</title>
    <link href="https://www.codesboy.cn/2020/07/06/62_%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/"/>
    <id>https://www.codesboy.cn/2020/07/06/62_%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/</id>
    <published>2020-07-06T15:21:24.000Z</published>
    <updated>2020-07-08T18:00:38.292Z</updated>
    
    <content type="html"><![CDATA[<p>一个机器人位于一个 <em>m x n </em>网格的左上角 （起始点在下图中标记为&ldquo;Start&rdquo; ）。</p><a id="more"></a><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为&ldquo;Finish&rdquo;）。</p><p>问总共有多少条不同的路径？</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png"></p><p><small>例如，上图是一个7 x 3 的网格。有多少可能的路径？</small></p><p>&nbsp;</p><p><strong>示例&nbsp;1:</strong></p><pre><strong>输入:</strong> m = 3, n = 2<strong>输出:</strong> 3<strong>解释:</strong>从左上角开始，总共有 3 条路径可以到达右下角。1. 向右 -&gt; 向右 -&gt; 向下2. 向右 -&gt; 向下 -&gt; 向右3. 向下 -&gt; 向右 -&gt; 向右</pre><p><strong>示例&nbsp;2:</strong></p><pre><strong>输入:</strong> m = 7, n = 3<strong>输出:</strong> 28</pre><p>&nbsp;</p><p><strong>提示：</strong></p><ul>    <li><code>1 &lt;= m, n &lt;= 100</code></li>    <li>题目数据保证答案小于等于 <code>2 * 10 ^ 9</code></li></ul><div><div>Related Topics</div><div><li>数组</li><li>动态规划</li></div></div><br/><p>第一种方法超时：<br>时间复杂度O(2^max(m,n))<br>空间复杂度O(max(m,n)),递归的最大深度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">1</span> || n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> uniquePaths(m - <span class="number">1</span>, n) + uniquePaths(m, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下方法是看了群友的思路：<br>第二种方法：</p><p>时间复杂度O(m*n)</p><p>空间复杂度O(m*n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] array= <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">    array[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span> &amp;&amp; j == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            array[i][j] = array[i][j - <span class="number">1</span>] + array[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200706234144.png" alt=""></p><p>第三种方法，空间优化：</p><p>时间复杂度O(m*n)</p><p>空间复杂度O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] last= <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    last[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] cur= <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            cur[j] = last[j] + cur[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        last=cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> last[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200707000249.png" alt=""></p><p><a href="https://github.com/leetcode-pp/91alg-1/issues/61#issuecomment-654016803">91算法打卡第三十六天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个机器人位于一个 &lt;em&gt;m x n &lt;/em&gt;网格的左上角 （起始点在下图中标记为&amp;ldquo;Start&amp;rdquo; ）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>78. 子集</title>
    <link href="https://www.codesboy.cn/2020/07/05/78_%E5%AD%90%E9%9B%86/"/>
    <id>https://www.codesboy.cn/2020/07/05/78_%E5%AD%90%E9%9B%86/</id>
    <published>2020-07-05T15:21:24.000Z</published>
    <updated>2020-07-06T00:30:15.130Z</updated>
    
    <content type="html"><![CDATA[<p>给定一组<strong>不含重复元素</strong>的整数数组&nbsp;<em>nums</em>，返回该数组所有可能的子集（幂集）。</p><a id="more"></a><p><strong>说明：</strong>解集不能包含重复的子集。</p><p><strong>示例:</strong></p><pre><strong>输入:</strong> nums = [1,2,3]<strong>输出:</strong>[  [3],&nbsp; [1],&nbsp; [2],&nbsp; [1,2,3],&nbsp; [1,3],&nbsp; [2,3],&nbsp; [1,2],&nbsp; []]</pre><div><div>Related Topics</div><div><li>位运算</li><li>数组</li><li>回溯算法</li></div></div><br/><p>暴力解法，没想到执行时间能超过那么多人。<br>伪代码思路如下：</p><ol><li>创建全局的list，用于存所有的组合。</li><li>首先在list 放入一个空数组</li><li>遍历整个nums：<br> 每遍历到一个num，就把list的所有的组合拿出来，复制一份，然后每个复制的组合再加上这个num，存入list中。</li><li>返回list</li></ol><p>时间复杂度 O(2^n - 1)<br>空间复杂度 O(2^(n-1))</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    List&lt;Integer&gt; nulList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(nulList);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; tempList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; subList : list) &#123;</span><br><span class="line">            ArrayList&lt;Integer&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;(subList);</span><br><span class="line">            integers.add(nums[i]);</span><br><span class="line">            tempList.add(integers);</span><br><span class="line">        &#125;</span><br><span class="line">        list.addAll(tempList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.codesboy.cn/2020/07/20200705123855.png" alt=""></p><p><a href="https://github.com/leetcode-pp/91alg-1/issues/60#issuecomment-653883996">91算法打卡第三十五天参考答案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一组&lt;strong&gt;不含重复元素&lt;/strong&gt;的整数数组&amp;nbsp;&lt;em&gt;nums&lt;/em&gt;，返回该数组所有可能的子集（幂集）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/categories/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
      <category term="刷算法题" scheme="https://www.codesboy.cn/tags/%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
